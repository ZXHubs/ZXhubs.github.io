<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZXhome</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-03-16T09:06:47.267Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ZhangX</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Xcode快捷键</title>
    <link href="http://yoursite.com/2022/03/16/Xcode%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2022/03/16/Xcode%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2022-03-16T08:56:16.000Z</published>
    <updated>2022-03-16T09:06:47.267Z</updated>
    
    <content type="html"><![CDATA[<p>常用的快捷键</p><p>光标左移：ctrl+b<br>光标右移：ctrl+f<br>光标上移：ctrl+p<br>光标下移：ctrl+n<br>光标移至一行最左边：ctrl+a<br>删除快捷键：ctrl+k</p><span id="more"></span><p>光标移至一行最右边：ctrl+e<br>删除一个单词：option+delete<br><strong>缩进对齐：ctrl+i</strong><br>向右边删除：ctrl+d<br>向上移动：ctrl+u<br>向下移动：ctrl+v<br>呼出搜索行数：command+l</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;常用的快捷键&lt;/p&gt;
&lt;p&gt;光标左移：ctrl+b&lt;br&gt;光标右移：ctrl+f&lt;br&gt;光标上移：ctrl+p&lt;br&gt;光标下移：ctrl+n&lt;br&gt;光标移至一行最左边：ctrl+a&lt;br&gt;删除快捷键：ctrl+k&lt;/p&gt;</summary>
    
    
    
    
    <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>LLVM</title>
    <link href="http://yoursite.com/2022/03/10/LLVM/"/>
    <id>http://yoursite.com/2022/03/10/LLVM/</id>
    <published>2022-03-10T07:40:21.000Z</published>
    <updated>2022-03-18T11:05:39.613Z</updated>
    
    <content type="html"><![CDATA[<p>LLVM 是模块化、可重用的编译器以及工具链技术的集合。</p><p>不同的前端后端使用统一的中间代码 LLVM IR</p><p>优点：支持一种新的编程语言，只需要实现一个新的前端。支持一种新的硬件设备，只需要实现一个新的后端。</p><p>GCC的前后端联系紧密，耦合在一起。</p><p>LLVM 作为实现各种静态和运行时编译语言的通用基础结构。</p><span id="more"></span><p>Clang 是 LLVM 的子项目，属于前端。</p><p>相对于 GCC，编译快、内存小、模块化设计、诊断信息可读性强。</p><p>源代码 –&gt; 前端 –&gt; 优化器 –&gt; 后端  –&gt; 机器码</p><p>前端：</p><p>词法分词、语法分析、语义分析、生成中间代码</p><p>优化器：</p><p>中间代码优化</p><p>后端：</p><p>生成机器码</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;LLVM 是模块化、可重用的编译器以及工具链技术的集合。&lt;/p&gt;
&lt;p&gt;不同的前端后端使用统一的中间代码 LLVM IR&lt;/p&gt;
&lt;p&gt;优点：支持一种新的编程语言，只需要实现一个新的前端。支持一种新的硬件设备，只需要实现一个新的后端。&lt;/p&gt;
&lt;p&gt;GCC的前后端联系紧密，耦合在一起。&lt;/p&gt;
&lt;p&gt;LLVM 作为实现各种静态和运行时编译语言的通用基础结构。&lt;/p&gt;</summary>
    
    
    
    
    <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>UIKit框架</title>
    <link href="http://yoursite.com/2022/03/07/UIKit%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2022/03/07/UIKit%E6%A1%86%E6%9E%B6/</id>
    <published>2022-03-07T07:40:36.000Z</published>
    <updated>2022-03-07T07:42:07.210Z</updated>
    
    <content type="html"><![CDATA[<p>1.UIAcceleration:</p><p>被叫做加速事件的一个UIAcceleration类的实例是用来代表即时的三维加速数据。为了接收重力加速度，要注册一个应用应用程序作为一个共享UIAccelerater对象的委托对象（参考UIAcceleromete类）。</p><p>UIAccelerater:<br>UIAccelerater类可以让你的寄存器接收到从板载硬件上得到的加速相关数据。当设备移动时，它的硬件能够报告沿主线在三维空间中的线性加速度变化。你可以利用这些数据来检测器件的电流方向和该方向的瞬时变化。你可以使用这瞬时变化输入到一个游戏或者启动应用程序中的一些行动。</p><span id="more"></span><p>UIaccessibilityElement<br>UIAccessibilityElement类封装的项目信息对一些特殊的人可见，默认情况下是不可访问的。例如，一个图标或文字图像不会自动访问，因为它没有继承的UIView（或UIControl）。一个包含等非视图的项目，创建一个实例来表示每个项目需要访问的UIAccessibilityElement。</p><p>4.UIBarItem</p><p>UIBarItem是一个抽象的超类用来在屏幕的底部给项目加上一栏。带栏的条目类似于一个按钮的方式。他们有标题，有图片，动作和目标。你可以在项目中启用和禁用一个带栏条目。</p><p>（1）UIBarButtonItem</p><p>一个栏按钮项目是放置在一个UIToolbar或UINavigation对象专门的按钮。它从它的抽象父类，UIBarItem继承的基本按钮的行为。UIBarButtonItem定义额外的初始化方法和属性，使用工具栏和导航栏。</p><p>（2）UITabBarItem</p><p>UITabBarItem类实现了一个带标签栏的项目，UITabBar类的实例。一个标签栏严格地以收音机模式来运作，其中一个项目是在选定的时间，点击标签栏项目切换上面的标签栏。您还可以指定在标签栏上项目的信息，例如加入额外的视觉徽章值，电话应用程序上使用该项目的徽章，以显示新邮件的数量。这个类还提供了一些系统默认创建的项目。</p><p>5.UIBezierPath</p><p>UIBezierPath类，您可以定义一个路径由直线和曲线的线段组成，并呈现在您的自定义视图路径。您可以使用这个类，最初只是为您的路径中指定的几何形状。路径可以定义简单的形状，如矩形，椭圆形和圆弧，或他们可以定义</p><p>杂的多边形，采用直线和曲线线段的混合物。定义的形状后，您可以使用这个类的其他方法来呈现当前图形上下文的路径。</p><p>6.UIColor</p><p>一个UIColor对象代表的颜色，有时不透明（alpha值）。您可以使用UIColor对象来存储颜色数据，并在绘画过程中，你可以用它们来设置当前填充和笔触颜色。</p><p>7.UIDecive</p><p>UIDevice类提供了一个单个实例代表当前设备。从这个实例中，可以获取有关设备的唯一的ID，分配名称，设备型号，和操作系统名称和版本等信息。您也可以使用的UIDevice实例，检测设备的特点，如物理方向的变化。使用方向属性得到当前的方向，或注册UIDeviceOrientationDidChangeNotification通知收到更改通知。在使用这些技术来获得定位数据之前，你必须使数据传递，使用的beginGeneratingDeviceOrientationNotifications方法。当您不再需要跟踪设备的方向，调用endGeneratingDeviceOrientationNotifications方法来禁用交付的通知..</p><p>8.UIDocumentInteractionController</p><p>一个文件交互控制器一起委托对象，提供应用程序管理与本地系统中的文件的用户交互的支持。例如，一个电子邮件程序可能使用这个类，允许用户预览附件和其他应用程序中打开它们。使用这个类，目前预览相应的用户界面，打开，复制或打印指定的文件。</p><p>9.UIEvent</p><p>一个UIEvent对象（或者简单地说，一个事件对象）代表在IOS的事件。一般有三种类型的事件：触摸事件，运动事件和远程控制的事件，。远程控制的事件使一个Responder对象来接收来自外部的附件或耳机的命令，以便它可以管理管理音频和视频，例如，播放视频或跳过到下一音轨。</p><p>10.UIFont</p><p>UIFont类提供了用于获取和设置字体信息的接口。类提供了访问字体的特点，还提供了访问，这是在布局过程中中使用的字体的字形信息系统。他们通过接受它们作为参数的方法，您可以使用字体对象。</p><p>11.UIGestureRecognizer</p><p>UIGestureRecognizer是一个具体的手势识别类的抽象基类。一个手势识别对象（或简单地说，一个手势识别）中分离出来承认这种认识上的姿态和行动的逻辑。当这些对象之一承认一个共同的姿态，或者，在某些情况下，改变的姿态，它发送一个动作消息，每一个指定的目</p><p>物镜。以下胃具体的子类：</p><p>（1）UITapGestureRecognizer</p><p>单个或多个塞子。指定数量的手指必须要承认的姿态，挖掘查看指定的次数。</p><p>（2）UIPinchGestureRecognizer</p><p>看起来捏的手势，涉及两个接触。当用户将两个手指，向对方的传统意义是缩小;当用户将两个手指从彼此远离，传统意义变焦。</p><p>（3）UIRotationGestureRecognizer</p><p>看起来轮换涉及两个触摸手势。当用户移动手指对面对方的圆周运动，基本的观点应该在相应的方向和速度旋转。</p><p>（4）UISwipeGestureRecognizer</p><p>看起来刷卡在一个或多个方向的手势。抨击是一个独立的姿态，因此，相关的操作的消息发送每个手势只有一次。</p><p>（5）UIPanGestureRecognizer</p><p>看起来平移（拖动）的手势。用户必须按查看上一个或更多的手指，而他们平移。实施这个手势识别动作方法的客户端可以要求它目前的翻译和手势的速度。</p><p>(6)UILongPressGestureRecognizer</p><p>看起来长按手势。用户必须按下一个或更多的手指行动讯息传送至少指定期限。此外，手指可能要承认的姿态移动唯一指定的距离;如果他们超越这个限制的姿态失败。</p><p>12.UIImage</p><p>一个UIImage对象是一个高层次的的方式来显示图像数据。您可以从文件中创建的图像，从石英图像中的物体，或从您收到的原始图像数据。UIImage的类还提供图像绘制到当前图形的上下文中，使用不同的混合模式和不透明度值的几种选择。</p><p>13.UILocalizedIndexedCollation</p><p>UILocalizedIndexedCollation类方便为有部分指数的图表进行组织，整理，以及数据本地化。表视图的数据源，然后使用排序对象提供的输入节的标题和节索引标题的表视图。</p><p>14.UILocalNotification</p><p>UILocalNotification实例表示，应用程序可以提交给它的用户在特定的日期和时间安排的通知。操作系统是负责在适当的时间提供通知;没有要运行发生的应用程序。虽然本地的通知类似，因为它们是用于显示警报，播放声音和徽章的应用程序图标，远程通知，它们是组成和本地传递，不需要与远程服务器连接。</p><p>15.UIMenuController</p><p>他单身UIMenuController实例介绍了菜单界面的剪切，复制，粘贴，选择，选择，和删除命令。</p><p>16.UINavigationItem</p><p>UINavigationItem类封装了一个UINavigationBar对象的堆栈上推导航项目的信息。一个导航栏是用于控制导航层次的内容。一个UINavigationItem指定什么是导航栏上的显示，当它是顶部的项目，也代表它是如何时，后面的项目。</p><p>17.UINib</p><p>UINib类的实例作为对象包装或容器，InterfaceBuilder的nib文件。一个UINib对象在内存中缓存的一个nib文件的内容，准</p><p>解档和实例。当您的应用程序需要实例化的nib文件的内容，它可以这样做，而不必从nib文件加载数据，从而提高性能。UINib对象可以自动释放该缓存笔尖数据免费为您的应用程序内存在低内存条件下，重新装载数据下一次你的应用程序实例笔尖。您的应用程序应该使用UINib对象时，它需要反复实例相同的笔尖数据。例如，如果您的表视图使用nib文件实例表视图细胞，缓存中UINib对象的笔尖可以提供显着的性能改善。</p><p>18.UIPasteboard</p><p>UIPasteboard类允许应用程序共享应用程序内部或与其他应用程序使用的全系统或应用程序特定的黏贴板的数据。</p><p>19.UIPopoverController</p><p>UIPopoverController类是用于管理在popover中内容的呈现。你使用popovers暂时地呈现目前信息暂时而且用一种不超过整个屏幕就像一个模态视图的方式。popover内容是你在一个特殊类型的窗口的现有内容上分层。popover仍然可见，直到用户水龙头以外的popover窗口或你明确驳回。Popover控制器为iPad等设备的提供使用仅限。尝试在其他设备结果出现异常时进行新的一个创建。</p><p>20.UIPrintFormatter</p><p>UIPrintFormatter时打印格式化的抽象基类：展示了传统的可打印的内容对象可以跨页边界。由于打印格式化，打印系统，可以自动打印与打印格式化的内容相关联的类型。以下为UIPrintFormatter的子类：</p><p>(1)UISimpleTextPrintFormatter</p><p>UISimpleTextPrintFormatter类的实例进行布局打印纯文本，可能是多个页面。类允许您指定的印刷文字全球的字体，颜色，对齐线，和换行符的模式属性。</p><p>(2)UIMarkupTextPrintFormatter</p><p>UIMarkupTextPrintFormatter类的实例展示了一个多页打印作业的HTML标记文本。</p><p>(3)UIViewPrintFormatter</p><p>UIViewPrintFormatter类的一个实例，勾画出用于打印的视图绘制的内容。视图的内容可以跨越多个页面。</p><p>21.UIPrintInfo</p><p>一个UIPrintInfo对象封装了有关打印作业的信息，包括打印机标识，作业名称，输出类型（照片，正常，灰阶），方向（纵向或横向），和任何选定的双工模式，。打印系统打印时，使用此信息。</p><p>22.UIPrintInteractionController</p><p>UIPrintInteractionController类的共享实例，提出了印刷的用户界面和管理的文件，图像和其他可打印的内容在iOS打印。UIPrintInteractionController是IOS中央印刷类。它的共享实例代表一个打印作业。打印作业，包括其印刷相关的信息和选项，如输出类型，作业名称，纸张大小和方向，要打印的内容。</p><p>23.UIPrintPageRenderer</p><p>一个UIPrintPageRenderer对象绘制要打印页的内容带或不带打印格式化.A页面的渲染就是UIPrintPageRenderer自定义子类的一个实例。当您撰写打印作业使用的UIPrintInteractionController共享实例，您指定的页面渲染到该实例的printPageRenderer属性。</p><p>24.UIPrintPaper</p><p>UIPrintPaper类的一个实例封装使用的纸张尺寸，打印作业，并在其中的内容可以打印的矩形。</p><p>25.UIResponder</p><p>UIResponder类定义了一个接口，应对和处理事件的对象。它是UIApplication，UIView和它的子类（包括UIWindow中）的超类。这些类的实例有时被称为作为响应者对象或简单地说，应答。</p><p>（1）UIApplication</p><p>UiApplication类，提供了一个在iOS上运行的应用程序的控制和协调集中点。每个应用程序必须具有完全的UIApplication的一个实例（或子类UIApplication）。当一个应用程序启动时，UIApplicationMain函数被调用，在其他任务中，这个函数创建了一个单身的UIApplication对象。此后，您可以通过这个对象调用sharedApplication类方法。</p><p>（2）UIViewController</p><p>UIViewController类提供iPhone应用程序的基本观点的管理模式。基本视图控制器类支持相关联的视图的演示，为管理模式视图提供支持，并支持在响应设备方向变化旋转的意见。象UINavigationController和UITabBarController的这样的子类，如提供管理复杂的层次结构视图控制器和视图的其他行为。</p><p>1）UITabBarController</p><p>UITabBarController类实现了一个专门的视图控制器管理一个广播式的选择界面。不适用于这个类的子类。相反，您可以使用它的实例去呈现允许用户在不同的操作模式之间进行选择的接口。这个标签栏界面显示在窗口底部的制表符之间的不同模式从而用来显示模式的意见选择。</p><p>2）UITableViewController</p><p>UITableViewController类创建一个控制器对象，管理表视图。</p><p>3）UINavigationController</p><p>UINavigationController的类实现了一个专门的视图控制器管理层次的内容导航。不适用于这个类的子类。相反，您可以使用实例当你希望你的应用程序的用户界面能够反映您的内容的层次性。此导航界面使你更有效的展现数据而且更容易让用户浏览内容。</p><p>3－1）UIImagePickerController</p><p>UIImagePickerController类管理定制的和系统提供的用户界面，支持的设备上的图片和电影，并选择把使用的图片和电影保存在您的应用程序中。的图像选取器控制器管理用户交互和委托对象提供这些相互作用的结果。</p><p>3－2）UIVideoEditorController</p><p>一个UIVideoEditorController对象，或视频编辑器，通过修剪从以前录制的电影的开始和结束的视频帧，以及重新编码降低质量来管理系统提供的用户界面。对象管理的用户交互，并提供您的委托对象编辑的电影文件系统路径。UIVideoEditorController类的特点是仅适用于设备，支持视频录制。</p><p>（3）UIView</p><p>UIView类通过定义一个在屏幕和界面上的矩形区域来管理这块区域的内容。在运行时，视图对象处理其区域内的任何内容渲染，还处理与该内容的任何相互作用。UIView类本身提供了基本行为的背景颜色填充矩形区域。更加复杂的内容，可以通过继承UIView和实施必要的绘图和自身事件处理代码来展现。UIKit框架还包括一个</p><p>准的子类可以使用的范围从简单的按钮到复杂的表集。例如，一个UILabel对象绘制一个文本字符串和一个UIImageView对象绘制一个图像。</p><p>1）UIWindow</p><p>UIWindow类定义，管理和协调的Windows应用程序显示在屏幕上的对象（如Windows）。一个窗口的两个主要职能是，为显示其意见面积和分发活动的意见。窗口是在视图层次的根。一个窗口属于一个级别；一个级别的窗口出现另一个层面以上。例如，警报出现高于正常的窗口。通常情况下，只有一个在IOS应用程序的窗口。</p><p>2）UILabel</p><p>UILabel类实现一个只读的文本视图。您可以使用这个类的静态文本，如你可能会使用它来识别你的用户界面的其他部分，绘制一个或多个行。基本UILabel类提供控制文本的外观，包括它是否使用了一层阴影，或汲取的一大亮点。如果需要，您可以自定义文本的外观进一步通过继承。</p><p>3）UIPickerView</p><p>UIPickerView类实现对象，所谓的选择器的看法，即使用一个纺车或老虎 机的比喻来显示一个或多个值集。用户可以选择旋转的车轮，使所需的行的值与选择的指</p><p>之间的对应关系值。UIDatePicker类使用一个自定义子类的UIPickerView显示日期和时间。为了看一个例子，挖掘在时钟应用程序报警窗格添加(“+”)按钮。</p><p>4）UIProgressView</p><p>当一个邮件应用程序下载消息时它的进度条会在应用程序的底部显示。UIProgressView类提供了管理风格的进度条，用于获取和设置值是固定的任务的进度的属性。</p><p>5）UIActivityIndicatorView</p><p>UIActivityIndicatorView类创建和管理一个指标用来显示不确定的任务进度。从外观上看，这个指</p><p>是一个“齿轮”是动画旋转。</p><p>6）UIImageView</p><p>图像的视图对象提供了一个用于显示单个图像或者一系列动画图像的基于视图的容器。对于动画图像，UIImageView的类提供设置动画的持续时间和频率的控制。您还可以启动和停止动画自由。</p><p>7）UITabBar</p><p>UITabBar类实现了一个选择两个或多个按钮的控制，并称之为项目。一个标签栏最常见的用途是实现一个模态接口攻一个项目的变化选择。如果你想暂时突出或不会改变某个项目的外观时，轻按按钮，使用一个UIToolbar对象。UITabBar类提供为用户定制能力重新排列标签栏，删除和酒吧中添加项目。您可以使用标签栏的委托，以增加这种行为。</p><p>8）UIToolBar</p><p>一个工具栏是显示一个或多个按钮被称之为工具栏项一种控制。当被轻按时工具栏瞬间突出或不改变某个项目的外观。</p><p>9）UINavigationBar</p><p>UINavigationBar类实现了一个层次的内容导航控制。它的一个条形栏，通常显示在屏幕上方，包含用于导航的向上和向下一个层次的按钮。主要属性是左（后退）按钮，中心的名称和一个可选的右边的按钮。您可以指定这些自定义视图。</p><p>10）UITableViewCell</p><p>的UITableViewCell类定义的细胞出现在UITableView的对象的属性和行为中。</p><p>11）UIActionSheet</p><p>使用UIActionSheet类可以把一套如何继续给定任务的替代品给用户。您还可以使用行动表，以提示用户确认是否有潜在危险的行动。该行动表包含一个可选的标题和一个或多个按钮，其中每个对应采取的行动。</p><p>12）UIAlterView</p><p>使用UIAlertView类向用户显示一条警告消息。警报视图的功能相似，但在外观上不同于一个动作表（UIActionSheet的一个实例）。</p><p>13）UIScrollView</p><p>UIScrollView的类提供支持显示的内容是大于应用程序的窗口大小。它可以使用户内滚动的内容，通过刷卡手势，和捏的手势放大和部分内容。</p><p>13－1）UITextView</p><p>UITextView的类实现一个滚动的，多行文本区域的行为。类支持使用自定义字体，颜色，和对齐的文本的显示，同时还支持文本编辑。通常可以使用一个文本视图，显示多行文本，如显示一个大的文本文件的身体时，。</p><p>13－2）UITableView</p><p>的UITableView（或简单地说，表视图）的一个实例是用于显示和编辑分层列出的信息的一种手段。</p><p>14）UISearchBar</p><p>UISearchBar类实现一个基于文本的搜索的文本字段控制。该控件提供了一个搜索按钮，输入文字的文本字段书签“按钮，一个取消按钮。UISearchBar对象实际上并不执行任何搜索。您可以使用委托，符合UISearchBarDelegate协议的对象，实施行动时，输入文本和按钮被点击。</p><p>15）UIWebView</p><p>您使用了UIWebView类，在您的应用程序中嵌入网页内容。要做到这一点，你只需创建一个UIWebView对象，将它附加到一个窗口，它发送一个请求加载网页内容。您也可以使用这个类在网页的历史向前和向后移动，你甚至可以设置一些网页内容属性的编程。</p><p>16）UIControl</p><p>UIControl是为控制对象，如用户的意图传达到应用程序的按钮和滑块的基类。你不能直接使用UIControl类实例化控制。相反，它定义了共同的界面和它的所有子类的行为结构。</p><p>16－1）UIButton</p><p>UIButton的类的一个实例，实现了在触摸屏上的按钮。触摸一个按钮拦截事件和动作消息发送到目标对象时。设定的目</p><p>和行动方法都继承自UIControl。这个类提供了方法来设置标题，图像，按钮等外观属性。通过这些访问，您可以为每个按钮状态指定一个不同的外观。</p><p>16－2）UIDatePicker</p><p>UIDatePicker类实现了一个对象，它使用多个旋转的车轮，以允许用户选择日期和时间。iPhone的例子是一个日期选择器，定时器和闹钟设置闹钟的时钟应用程序中的窗格。您也可以使用日期选择器作为一个倒数计时器。</p><p>16－3）UIPageControl</p><p>您可以使用UIPageControl类来创建和管理页面控制。一个页面控制是在控制中心的点继承。每个点对应一个应用程序的文档（或其他实体的数据模型）页面，白色圆点表示当前浏览的网页。</p><p>16－4）UISegmentedControl</p><p>一个UISegmentedControl对象是横向控制多个段，每个段作为一个独立的按钮运作。分段控制提供一个紧凑的手段，组合到一起的控制。</p><p>16－5）UITextField</p><p>UITextField对象是一个显示可编辑的文字和动作消息发送到目标对象，当用户按下返回按钮控制。通常可以使用这个类从用户收集少量的文字，并执行一些立即采取行动，如搜索操作，根据该文本。</p><p>16－6）UISlider</p><p>一个UISlider对象是一个可视化的控制，用来选择一个连续值范围从单一的值。滑块始终显示为单杠。指</p><p>，或拇指，注意到滑块的当前值，并更改设置的用户可以通过移动。</p><p>16－7）UISwitch</p><p>您可以使用UISwitch类来创建和管理ON/ OFF按钮，您会看到，例如在飞行模式等服务的偏好设定（设定）。这些对象被称为开关。</p><p>26.UIScreen</p><p>一个UIScreen对象包含设备的整个屏幕的边界矩形。当设置应用程序的用户界面，你应该使用这个对象的属性，能为您的应用程序的窗口的建议的框架矩形。</p><p>27.UIScreenMode</p><p>一个UIScreenMode对象表示的，可以应用到一个UIScreen对象的属性可能。该对象封装了有关屏幕的底层显示缓冲区的大小和使用单个像素的宽高比信息。</p><p>28.UISearchDisplayController</p><p>搜索显示控制器管理一个搜索栏，显示表视图显示另一种观点认为控制器管理的数据搜索的结果。</p><p>29.UITextChecker</p><p>您使用的UITextChecker类的实例来检查拼写错误的单词字符串（通常是文档中的文本）。</p><p>30.UITextPosition</p><p>一个UITextPosition对象代表一个文本容器中的位置，换句话说，它是一个到在文本显示的支持字符串的索引。</p><p>31.UITextRange</p><p>一个UITextRange对象代表一个字符在文本容器的范围，换句话说，它确定一个起始索引和结束索引一个字符串，支持一个文本输入对象。</p><p>32.UITouch</p><p>一个UITouch对象表示存在一个特定事件的屏幕上用手指或运动。你可以通过UIEvent对象传递到事件处理响应对象UITouch对象。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1.UIAcceleration:&lt;/p&gt;
&lt;p&gt;被叫做加速事件的一个UIAcceleration类的实例是用来代表即时的三维加速数据。为了接收重力加速度，要注册一个应用应用程序作为一个共享UIAccelerater对象的委托对象（参考UIAcceleromete类）。&lt;/p&gt;
&lt;p&gt;UIAccelerater:&lt;br&gt;UIAccelerater类可以让你的寄存器接收到从板载硬件上得到的加速相关数据。当设备移动时，它的硬件能够报告沿主线在三维空间中的线性加速度变化。你可以利用这些数据来检测器件的电流方向和该方向的瞬时变化。你可以使用这瞬时变化输入到一个游戏或者启动应用程序中的一些行动。&lt;/p&gt;</summary>
    
    
    
    
    <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式</title>
    <link href="http://yoursite.com/2022/02/24/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2022/02/24/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-24T08:03:48.000Z</published>
    <updated>2022-02-24T08:30:11.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS-开发中一些设计模式"><a href="#iOS-开发中一些设计模式" class="headerlink" title="iOS 开发中一些设计模式"></a>iOS 开发中一些设计模式</h1><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><hr><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>在整个应用程序中，共享一份资源。保证在程序运行过程中，一个类只有一个实例，而且在该实例只提供一个全局访问点供外界访问，从而方便控制实例个数，节约系统资源。</p><p>优点：提供了对唯一实例的受控访问、可扩展、避免频繁创建销毁对象影响性能。</p><p>缺点：延长了生命周期，一直存在占用内存。如果两个单例循环依赖会造成死锁，所以尽量不去产生单立间的依赖关系。</p><span id="more"></span><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>通过类继承创建抽象产品，创建一种产品，子类化创建者并重载工厂方法以创建新产品。</p><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>通过对象组合创建抽象产品，可以创建多系列产品，必须修改父类的接口才能支持新的产品。</p><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><hr><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>代理用来处理事件的监听和参数传递。<code>required</code> 修饰必须实现这个协议方法，<code>optional</code> 修饰可选实现。使用方法时最好先判断方法是否实现 respondsToSelector: ，避免找不到方法而崩溃。</p><h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><p>在不比改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。诸如：分类。</p><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p>使用共享物件，减少同一类对象大量创建。如：<code>UITableviewCell</code> 复用。</p><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>其本质上是一种发布-订阅模型，用来消除具有不同行为的对象之间的耦合，通过这一模式，不同对象可以协同工作。诸如：KVO。</p><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>是一种将方法调用封装为对象的设计模式，在 iOS 中具体实现为 <code>NSInvocation</code>。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;iOS-开发中一些设计模式&quot;&gt;&lt;a href=&quot;#iOS-开发中一些设计模式&quot; class=&quot;headerlink&quot; title=&quot;iOS 开发中一些设计模式&quot;&gt;&lt;/a&gt;iOS 开发中一些设计模式&lt;/h1&gt;&lt;h2 id=&quot;创建型模式&quot;&gt;&lt;a href=&quot;#创建型模式&quot; class=&quot;headerlink&quot; title=&quot;创建型模式&quot;&gt;&lt;/a&gt;创建型模式&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h3&gt;&lt;p&gt;在整个应用程序中，共享一份资源。保证在程序运行过程中，一个类只有一个实例，而且在该实例只提供一个全局访问点供外界访问，从而方便控制实例个数，节约系统资源。&lt;/p&gt;
&lt;p&gt;优点：提供了对唯一实例的受控访问、可扩展、避免频繁创建销毁对象影响性能。&lt;/p&gt;
&lt;p&gt;缺点：延长了生命周期，一直存在占用内存。如果两个单例循环依赖会造成死锁，所以尽量不去产生单立间的依赖关系。&lt;/p&gt;</summary>
    
    
    
    
    <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>iOS 面试题</title>
    <link href="http://yoursite.com/2022/02/23/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2022/02/23/%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-02-23T06:33:03.000Z</published>
    <updated>2022-02-27T09:54:18.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP-为什么要三次握手，四次挥手？"><a href="#TCP-为什么要三次握手，四次挥手？" class="headerlink" title="TCP 为什么要三次握手，四次挥手？"></a>TCP 为什么要三次握手，四次挥手？</h1><p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误，假设这是一个早已失效的报文段。</p><p>但是服务器使用到此失效的连接请求报文段后，就误认为客户端再次发出的一个新的连接请求。于是就向客户端发出确认报文段，同意建立连接。</p><p>假设不采用三次握手，那么只要服务器发出确认，新的连接就建立了。</p><p>由于客户端没有发出建立连接的请求，因此不会理睬服务器的确认，也不会向服务器发送数据，但是服务器却以为新的运输连接已经建立，并一直等待客户端发来数据，这样服务器的很多资源就会被浪费掉。</p><span id="more"></span><p>四次挥手主要是：因为 TCP 是全双工通信，在接收到客户端的关闭请求时，还可能在向客户端发送数据，因此不能回应关闭链接的请求时，同时发送关闭链接的请求。</p><h1 id="HTTP-和-HTTPS-的区别"><a href="#HTTP-和-HTTPS-的区别" class="headerlink" title="HTTP 和 HTTPS 的区别"></a>HTTP 和 HTTPS 的区别</h1><p>HTTP 是明文传输，数据都是为加密的，安全性较差。<br>HTTPS（SSL+HTTP）数据传输过程是加密的，安全性较高。</p><p>使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构）申请证书，一般免费证书少，因而需要一定费用。</p><p>HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS 除了 TCP 的三个包，还要加上 SSL 握手需要的 9 个包，一共是 12 个包。</p><p>HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443.</p><p>HTTPS 就是建构在 SSL/TLS 之上的 HTTP 协议，所以，HTTPS 比 HTTP 更加消耗服务器资源。</p><h1 id="成员变量和属性的区别以及不同关键字的作用"><a href="#成员变量和属性的区别以及不同关键字的作用" class="headerlink" title="成员变量和属性的区别以及不同关键字的作用"></a>成员变量和属性的区别以及不同关键字的作用</h1><p>成员变量：默认修饰符是 <code>protected</code>，不会自动生成 <code>set</code> 和 <code>get</code> 方法，需要手动实现，不能使用点语法调用，因为没有 <code>set</code> 和<code>get</code> 方法，只能使用<code>-&gt;</code>。</p><p>属性：默认会生成带下划线的成员变量和 <code>setter</code>/<code>getter</code> 方法，可以使用点语法调用，实际上调用的是 <code>set</code> 和 <code>get</code> 方法。<br>⚠️注意：分类中添加的属性是不会自动生成 <code>setter</code>/<code>getter</code> 方法，必须手动添加。</p><p>实例变量：class 类进行实例化出来的对象为实例对象。</p><p>关键字作用：<br><code>public</code> 声明公共实例变量，在任何地方都能直接访问对象的成员变量。<br><code>private</code> 声明私有实例变量，只能在当前类对象方法中直接访问，子类要访问需要调用父类的 <code>set</code>/<code>get</code>方法。 private(set)。<br><code>protected</code> 可以在当前类及其子类对象方法中直接访问（系统默认）。<br><code>package</code> 在同一个包下就可以直接访问，诸如同一个框架下。<br><code>property</code> 声明属性</p><h1 id="多线程原理与生命周期"><a href="#多线程原理与生命周期" class="headerlink" title="多线程原理与生命周期"></a>多线程原理与生命周期</h1><p>对于单核 CPU，同一时间，CPU 只能处理一条线程，即只有一条线程在工作，iOS 中的多线程同时执行的本质是 CPU 在多个任务直接进行快速的切换，由于 CPU 调度线程的时间足够快，就造成多线程的“同时”执行的效果。其中，切换的时间间隔就是时间片。<br>对于多核 CPU，有意义的是并发。</p><p>1、新建状态<br>用 <code>new</code> 关键字建立一个线程后，该线程对象就处于新建状态。处于新生状态的线程有自己的内存空间，通过调用 <code>start()</code> 方法进入就绪状态。</p><p>2、就绪状态<br>处于就绪状态线程具备了运行条件，但还没分配到 CPU，处于线程就绪队列，等待系统为其分配到 CPU。当系统选定一个等待执行的线程后，它就会从就绪状态进入运行状态，称为“CPU 调度”。</p><p>3、运行状态<br>在运行状态的线程执行自己的 <code>run</code> 方法中，直到等待某资源而阻塞或完成任务而死亡。如果在给定时间片内没有执行结束，就会被系统给换下来回到就绪状态。</p><p>4、阻塞状态<br>处于运行状态的线程在某些情况下，如执行了 <code>sleep</code> 方法，或等待 I/O 设备等资源，将让出 CPU 并暂时停止自己运行，进入阻塞状态。<br>在阻塞状态的线程不能进入就绪队列。只有当引起阻塞的原因消除时，如睡眠时间已到，或等待的 I/O 设备空闲下来，线程便转入就绪状态，重新到就绪队列中排队等待，被系统选中后从原来停止的位置开始继续执行。</p><p>5、死亡状态<br>线程生命周期中的最后一个阶段。线程死亡的原因有三个，第一个是正常运行的线程完成了它的全部工作；第二个是线程被强制性地终止，如：通过 <code>exit</code> 方法来终止一个线程；第三个是线程抛出未捕获的异常。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;TCP-为什么要三次握手，四次挥手？&quot;&gt;&lt;a href=&quot;#TCP-为什么要三次握手，四次挥手？&quot; class=&quot;headerlink&quot; title=&quot;TCP 为什么要三次握手，四次挥手？&quot;&gt;&lt;/a&gt;TCP 为什么要三次握手，四次挥手？&lt;/h1&gt;&lt;p&gt;为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误，假设这是一个早已失效的报文段。&lt;/p&gt;
&lt;p&gt;但是服务器使用到此失效的连接请求报文段后，就误认为客户端再次发出的一个新的连接请求。于是就向客户端发出确认报文段，同意建立连接。&lt;/p&gt;
&lt;p&gt;假设不采用三次握手，那么只要服务器发出确认，新的连接就建立了。&lt;/p&gt;
&lt;p&gt;由于客户端没有发出建立连接的请求，因此不会理睬服务器的确认，也不会向服务器发送数据，但是服务器却以为新的运输连接已经建立，并一直等待客户端发来数据，这样服务器的很多资源就会被浪费掉。&lt;/p&gt;</summary>
    
    
    
    
    <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 MVC 和 MVVM</title>
    <link href="http://yoursite.com/2022/02/23/MVC%E5%92%8CMVVM/"/>
    <id>http://yoursite.com/2022/02/23/MVC%E5%92%8CMVVM/</id>
    <published>2022-02-23T06:08:09.000Z</published>
    <updated>2022-03-11T07:17:19.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><p>M 是数据模型 Model，负责处理数据，以及数据改变时发出通知。（Notification、KVO），Model 和 View 不能直接进行通信，这样会违背 MVC 设计模式。</p><p>V 是视图 View，用来展示界面，和用户进行交互，为了解耦合一般不会直接持有或者操作数据层中的数据模型（可以通过 target-action、delegate、block 等方式解耦）。</p><p>C 是控制器 Controller 用来调节 Model 和 View 之间的交互，可以直接与 Model 还有 View 进行通信，操作 Model 进行数据更新，刷新 View。</p><div align="center"><img src="https://gitee.com/zxhubs/source-material/raw/master/ios_mvc.jpeg"/></div><center>MVC如图所示</center><span id="more"></span><hr><p>优点：View、Model 低耦合、高复用、容易维护。<br>缺点：Controller 的代码过于臃肿，如果 View 与 Model 直接交互会导致 View 和 Model 之间的耦合性增大，网络逻辑会加重 Controller 的臃肿。</p><p>1、 Controller 和 View 之间可以通信，Controllor 通过 outlet(输出口)控制 View，View 可以通过 target-action、delegate 或者 data source(想想UITableVeiwDatasource)来和 Controller 通信；</p><p>2、 Controller 在接收到 View 传过来的交互事件(View就是完成让人和程序的交互的呀，比如按下按钮)之后，经过一些判断和处理，把需要 Model 处理的事件递交给 Model 处理(比如刚才的例子中的保存到数据库)，Controller 对 Model 使用的是 API；</p><p>3、 Model 在处理完数据之后，如果有需要，会通过 Notification 或者 KVO 的方式告知 Controller，事件已经处理完，Controller 再经过判断和处理之后，考虑下一步要怎么办(是默默无闻的在后台操作，还是需要更新 View，这得看 Controller 的“脸色”行事)。这里的无线天线很有意思，Model 只负责发送通知，具体谁接收这个通知并处理它，Model 并不关心，这一点非常重要，是理解 Notification 模式的关键。</p><p>4、 Model 和 View 之间不直接通信！</p><p>View 通过 target-action 模式向 Controller 传递消息，Controller 通过 API 调用 Model 里面的方法来处理从 View 那接收到的消息；Model 处理完数据之后，通过 Notification 模式向 Controller 传递一个消息，最终 Controller 通过一个方法(即 Notification 的接收方法)弹出来一个对话框显示 Model 已经处理完成。</p><h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><p>MVVM 衍生于 MVC，是 MVC 的一种演进，促进了 UI 代码和业务逻辑的分离，抽取 Controller 中的展示逻辑放到 ViewModel 中。</p><p>M：数据模型 Model，负责处理数据，以及数据改变时发出通知。</p><p>V：是 View 和 Controller 联系到一起，视为一个组件 View。View 和 Controller 都不直接引用模型 Model，可以引用视图模型 ViewModel。ViewController 尽量不涉及业务逻辑，让 ViewModel 做这些事情。ViewController 属于中间人，负责接收 View 的事件、调用 ViewModel 的方法、响应 ViewModel 的变化。</p><p>VM：ViewModel 负责封装业务逻辑、网络处理和数据缓存。使用 ViewModel 会轻微增加代码量，但是总体上减少了代码的复杂性。ViewModel 之间可以有依赖。</p><blockquote><p>注意事项：View 引用 ViewModel，但是反过来不行，因为如果 VM 跟 V 产生了耦合，不方便复用。即不要在 ViewModel 中引用 UIKit，任何视图本身的引用都不应该放在 ViewModel 中。<br>ViewModel 可以引用 Model，但反过来不行。</p></blockquote><hr><p>优点：低耦合、可复用、数据流向清晰，而且兼容 MVC，便于代码的移植，并且 ViewModel 可以拆除来独立开发方便测试。<br>缺点：类会增多，ViewModel 会越来越庞大，调用复杂度增加、双向绑定数据会导致问题调试变得困难。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>MVVM 其实是 MVC 的变种。MVVM 只是帮 MVC 中的 Controller 瘦身，把一些逻辑代码和网络请求分离出去。不让 Controller 处理更多的东西，不会变得臃肿，MVVM 和 MVC 可以根据实际需求进行灵活选择。</p><p>MVVM 在使用当中，通常还会利用双向绑定技术，使得 Model 变化时，ViewModel 会自动更新，而 ViewModel 变化时，View 也会自动变化。OC中可以用 RAC 函数响应式框架来实现响应式编程。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=&quot;MVC&quot;&gt;&lt;/a&gt;MVC&lt;/h1&gt;&lt;p&gt;M 是数据模型 Model，负责处理数据，以及数据改变时发出通知。（Notification、KVO），Model 和 View 不能直接进行通信，这样会违背 MVC 设计模式。&lt;/p&gt;
&lt;p&gt;V 是视图 View，用来展示界面，和用户进行交互，为了解耦合一般不会直接持有或者操作数据层中的数据模型（可以通过 target-action、delegate、block 等方式解耦）。&lt;/p&gt;
&lt;p&gt;C 是控制器 Controller 用来调节 Model 和 View 之间的交互，可以直接与 Model 还有 View 进行通信，操作 Model 进行数据更新，刷新 View。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://gitee.com/zxhubs/source-material/raw/master/ios_mvc.jpeg&quot;/&gt;
&lt;/div&gt;

&lt;center&gt;MVC如图所示&lt;/center&gt;</summary>
    
    
    
    
    <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>如何运行 GitHub 上的 iOS app</title>
    <link href="http://yoursite.com/2022/02/22/%E5%A6%82%E4%BD%95%E8%B7%91GitHub%E4%B8%8A%E7%9A%84iOSapp/"/>
    <id>http://yoursite.com/2022/02/22/%E5%A6%82%E4%BD%95%E8%B7%91GitHub%E4%B8%8A%E7%9A%84iOSapp/</id>
    <published>2022-02-22T08:49:26.000Z</published>
    <updated>2022-02-22T09:00:09.789Z</updated>
    
    <content type="html"><![CDATA[<p>步骤一、clone 源码之后，在你的 Mac 上安装 CocoaPods。</p><p>步骤二、打开 <code>终端</code>，切换到工程文件的目录下。比如你的工程文件下载到了 Mac 的桌面上，在 <code>终端</code> app 中输入 cd 切换到文件目录下。</p><p>步骤三、输入 <code>pod install</code> 安装工程所依赖的库。显示如下即安装成功。<br>步骤四、在 Xcode 中打开运行本工程文件，请注意⚠️打开的是 <code>.xcworkspace</code> 并非是 <code>.xcodeproj</code>，请务必注意后缀。</p><span id="more"></span><blockquote><p> 在上述指南中可能会遇到的一些疑惑。</p></blockquote><ul><li>Q：CocoaPods 是什么？<br>A：CocoaPods 是 macOS 和 iOS 平台非常流行的包管理工具，用来帮助我们管理第三方依赖库的工具。通过调用第三方库，可以用于拓展软件的功能。</li></ul><hr><ul><li>Q：为什么需要 CocoaPods？<br>A：在实际开发过程中避免不了去使用第三方的库，所以会使用到 CocoaPods。pod 是由 ruby 语言编写的，是记录引用库的名称，执行 <code>pod install</code> 即在把远程仓库下载至本地。</li></ul><hr><ul><li>Q：在使用 <code>pod install</code> 命令时速度过慢？<br>A：解决方案之一可以采取换源的方式。输入 <code>gem sources</code> 能够查看当前源。输入 <code>gem sources --add https://gems.ruby-china.com/</code> 删除之前的源 <code>gem sources -r https://rubygems.org/</code></li></ul><hr><ul><li>Q：在使用 <code>Podfile</code> 文件是什么？<br>A：用于描述一个或多个 <code>Xcode Project</code> 中各个 <code>Targets</code> 之间的依赖关系</li></ul><hr><ul><li>Q：在使用 <code>Lockfile</code> 文件是什么？<br>A：用于记录最后一次 CocoaPods 所安装的 Pod 依赖库版本的信息快照。生成的 Podfile.lock。在 pod install 过程，Podfile 会结合它来确认最终所安装的 Pod 版本。</li></ul><hr><ul><li>Q：xcworkspace 和 xcodeproj 的区别？<br>A：xcodeproj bundle 内包含 project.workspace。而当我们通过 pod install 命令添加 Pod 依赖后，Xcode 工程目录下会多出 .workspace，它是 Xcodeproj 替我们生成的，用于管理当前的 .project 与 Pods.pbxproj。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;步骤一、clone 源码之后，在你的 Mac 上安装 CocoaPods。&lt;/p&gt;
&lt;p&gt;步骤二、打开 &lt;code&gt;终端&lt;/code&gt;，切换到工程文件的目录下。比如你的工程文件下载到了 Mac 的桌面上，在 &lt;code&gt;终端&lt;/code&gt; app 中输入 cd 切换到文件目录下。&lt;/p&gt;
&lt;p&gt;步骤三、输入 &lt;code&gt;pod install&lt;/code&gt; 安装工程所依赖的库。显示如下即安装成功。&lt;br&gt;步骤四、在 Xcode 中打开运行本工程文件，请注意⚠️打开的是 &lt;code&gt;.xcworkspace&lt;/code&gt; 并非是 &lt;code&gt;.xcodeproj&lt;/code&gt;，请务必注意后缀。&lt;/p&gt;</summary>
    
    
    
    
    <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>搭建博客</title>
    <link href="http://yoursite.com/2022/02/20/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2022/02/20/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-02-20T08:10:19.000Z</published>
    <updated>2022-02-21T05:02:14.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用-Hexo-GitHub-Gitee-Pages-搭建个人博客"><a href="#利用-Hexo-GitHub-Gitee-Pages-搭建个人博客" class="headerlink" title="利用 Hexo + GitHub(Gitee) Pages 搭建个人博客"></a>利用 Hexo + GitHub(Gitee) Pages 搭建个人博客</h1><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>  文章从两个部分介绍 Hexo 和 GitHub Pages 结合，快速、便捷的搭建出博客，且无流量限制，属于自己的个人博客。续写你自己的技术、感受等任何类型的文章。</p><h2 id="GitHub-Gitee-Pages"><a href="#GitHub-Gitee-Pages" class="headerlink" title="GitHub(Gitee) Pages"></a>GitHub(Gitee) Pages</h2><p>步骤一、如果没有 GitHub 或 Gitee 账户先注册一个。然后新建一个仓库。在 GitHub 下仓库名要求格式：<code>xxx.github.io</code> 的形式。<br>步骤二、勾选 README。<br>步骤三、点击 Create repository。</p><p>对于 Gitee 来说，仓库必须有 index.html 才可以正常访问。<br>步骤一、新建一个仓库。<br>步骤二、新建一个文件 index.html 提交到仓库<br>步骤三、选择 “服务 - Pages 服务”（注意使用必须要求实名认证否则无法使用，不想实名认证建议使用 GitHub）<br>步骤四、选择部署分支点击启动。</p><span id="more"></span><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><blockquote><p><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a> 这是 Hexo 中文官方网站<br><a href="https://git-scm.com/">https://git-scm.com</a> 这是 Git 官方网站<br><a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a> 这是 Node.js 官方网站</p></blockquote><p>步骤一、在本地创建一个存放博客的文件夹。<br>步骤二、确保本机已经安装好了 Node.js 和 Git。<br>步骤三、通过<code>终端</code>（Mac）或 Windows 下的命令行工具执行下列命令安装 Hexo。不要复制 $ 符号。假设文件夹在桌面上名为：zxhusb。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /Desktop/zxhubs</span><br><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>步骤四、在zxhubs文件夹目录下执行，如果没有执行 cd zxhusb。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init zxhusb</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>步骤五、打开浏览器输入 localhost:4000 即可看到对应 Hexo 的默认 landscape 主题。如果对默认的不满意，（绝大多数人都会修改主题）在 <a href="https://hexo.io/themes/">Hexo 主题</a> 中找到自己喜欢的主题。如果需要关闭本地服务器在命令行直接按 control + C 即可关闭。<br>步骤六、更换主题，在 zxhubs 的目录下执行，下面命令是举例说明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/probberechts/cactus-dark</span><br></pre></td></tr></table></figure><p>在 zxhubs 编辑 _config.yml，修改 theme，为主题的名字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">theme:</span><br><span class="line">     cactus-dark</span><br></pre></td></tr></table></figure><p>步骤七、上传到 GitHub 或 Gitee 上，继续编辑 _config.yml。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository: </span><br><span class="line">    # 此处改为你自己GitHub Pages 或者 Gitee Pages 地址</span><br><span class="line">    branch:main</span><br><span class="line">    #注意以前用的 GitHub 已将 master 改成了 mian，对于 Gitee 还是 master</span><br></pre></td></tr></table></figure><p>这样大家都可以在网上浏览了你的网页了。<br>步骤八、添加或修改博客的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 此处替换为你的文章名字支持中英文</span><br></pre></td></tr></table></figure><p>步骤九、完成文章的撰写后，执行下列命令，生成静态网页。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>步骤十、上传到网页上执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>这样即可在网页中看到修改的内容了，如果不想使用 <code>xxx.github.io</code>或<code>xxx.gitee.io</code>的域名，可以自己去备案购买申请一个域名，修改为自己的域名。</p><h2 id="跋"><a href="#跋" class="headerlink" title="跋"></a>跋</h2><p>   希望上述教程能够协助大家完成自己博客的搭建，这将会是一件有趣事情。能够提高你自己的动手能力和解决问题的能力，在搭建和写作过程中遇到的问题可以慢慢探索。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;利用-Hexo-GitHub-Gitee-Pages-搭建个人博客&quot;&gt;&lt;a href=&quot;#利用-Hexo-GitHub-Gitee-Pages-搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;利用 Hexo + GitHub(Gitee) Pages 搭建个人博客&quot;&gt;&lt;/a&gt;利用 Hexo + GitHub(Gitee) Pages 搭建个人博客&lt;/h1&gt;&lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;  文章从两个部分介绍 Hexo 和 GitHub Pages 结合，快速、便捷的搭建出博客，且无流量限制，属于自己的个人博客。续写你自己的技术、感受等任何类型的文章。&lt;/p&gt;
&lt;h2 id=&quot;GitHub-Gitee-Pages&quot;&gt;&lt;a href=&quot;#GitHub-Gitee-Pages&quot; class=&quot;headerlink&quot; title=&quot;GitHub(Gitee) Pages&quot;&gt;&lt;/a&gt;GitHub(Gitee) Pages&lt;/h2&gt;&lt;p&gt;步骤一、如果没有 GitHub 或 Gitee 账户先注册一个。然后新建一个仓库。在 GitHub 下仓库名要求格式：&lt;code&gt;xxx.github.io&lt;/code&gt; 的形式。&lt;br&gt;步骤二、勾选 README。&lt;br&gt;步骤三、点击 Create repository。&lt;/p&gt;
&lt;p&gt;对于 Gitee 来说，仓库必须有 index.html 才可以正常访问。&lt;br&gt;步骤一、新建一个仓库。&lt;br&gt;步骤二、新建一个文件 index.html 提交到仓库&lt;br&gt;步骤三、选择 “服务 - Pages 服务”（注意使用必须要求实名认证否则无法使用，不想实名认证建议使用 GitHub）&lt;br&gt;步骤四、选择部署分支点击启动。&lt;/p&gt;</summary>
    
    
    
    
    <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="建站" scheme="http://yoursite.com/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Swift 笔记</title>
    <link href="http://yoursite.com/2022/02/19/swift/"/>
    <id>http://yoursite.com/2022/02/19/swift/</id>
    <published>2022-02-19T09:15:10.000Z</published>
    <updated>2022-02-20T09:36:32.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="swift-笔记"><a href="#swift-笔记" class="headerlink" title="swift 笔记"></a>swift 笔记</h1><h1 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h1><h2 id="常量let-amp-变量var"><a href="#常量let-amp-变量var" class="headerlink" title="常量let &amp; 变量var"></a>常量let &amp; 变量var</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="number">10</span>  <span class="comment">// 常量的值设定后不能更改</span></span><br><span class="line"><span class="keyword">var</span> b <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> x <span class="operator">=</span> <span class="number">0.0</span>, y <span class="operator">=</span> <span class="number">0.0</span>, z <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line"><span class="keyword">var</span> red, green, blue: <span class="type">Double</span> <span class="comment">// 理论上可以实际很少这么写</span></span><br></pre></td></tr></table></figure><p>常量和变量名可以包含任何字符，包括一些Unicode字符。<strong>常量和变量名不能包含空格，数学符号，箭头，专用的Unicode标量值或线条和框形图字符，不能以数字开头</strong>。不能将常量更改为变量或将变量更改为常量。如果需要命名为保留的Swift关键字名称，在关键字两端加上反引号`，不建议使用保留的关键字。</p><span id="more"></span><p><strong>使用 <code>\()</code> 打印</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a =  <span class="subst">\(num)</span>)&quot;</span>) </span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"><span class="comment">/* 多行注释</span></span><br><span class="line"><span class="comment">可以嵌套 */</span></span><br></pre></td></tr></table></figure><h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><p>可以写也可以不写，一般不写分号。如果要在一行上编写多个单独的语句，则需要分号。</p><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><p>Swift提供8位，16位，32位和64位形式的有符号和无符号整数。其中8位无符号整数的类型为UInt8，而32位有符号整数的类型为Int32。一般使用Int就可以了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> minValue <span class="operator">=</span> <span class="type">UInt8</span>.min  <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> maxValue <span class="operator">=</span> <span class="type">UInt8</span>.max  <span class="comment">// 255</span></span><br></pre></td></tr></table></figure><p>在大多数情况下，无需选择特定大小的整数即可在代码中使用。Swift提供了额外的整数类型，Int其大小与当前平台的本机字大小相同：在32位平台上，Int与大小相同Int32；在64位平台上，Int与大小相同Int64。Swift还提供了一个无符号整数类型，UInt其大小与当前平台的本机字大小相同。</p><h2 id="浮点值"><a href="#浮点值" class="headerlink" title="浮点值"></a>浮点值</h2><ul><li>Double 表示一个64位浮点数，精度至少为15个十进制数字</li><li>Float 表示一个32位浮点数，精度可以低至6个十进制数字<h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2>当声明具有初始值的常量或变量时，swift根据类型推断来确定常量或者变量的类型：<code>var name: String</code><br>在浮点值里面默认都是Double<h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="number">17</span>              <span class="comment">// 十进制数，无前缀</span></span><br><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> <span class="number">0b10001</span>       <span class="comment">// 二进制数，前缀0b</span></span><br><span class="line"><span class="keyword">let</span> c <span class="operator">=</span> <span class="number">0o21</span>           <span class="comment">// 八进制数，前缀0o</span></span><br><span class="line"><span class="keyword">let</span> d <span class="operator">=</span> <span class="number">0x11</span>     <span class="comment">// 十六进制数，前缀0x</span></span><br></pre></td></tr></table></figure>浮点文字可以是十进制（不带前缀）或十六进制（带0x前缀）。它们的小数点两侧必须始终有一个数字（或十六进制数字）。小数浮点数也可以有一个可选的指数，用大写或小写表示e; 十六进制浮点数必须具有指数，以大写或小写表示p。<br>对于指数为的十进制数字exp，基数乘以10^exp：</li><li>1.25e2表示1.25 x 10^2，或125.0。</li><li>1.25e-2表示1.25 x 10^-2，或0.0125。</li></ul><p>对于指数为的十六进制数exp，将基数乘以2^exp：</p><ul><li>0xFp2表示15 x 2^2，或60.0。</li><li>0xFp-2表示15 x 2^-2，或3.75。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decimal <span class="operator">=</span> <span class="number">12.1875</span>            <span class="comment">// 十进制</span></span><br><span class="line"><span class="keyword">let</span> e <span class="operator">=</span> <span class="number">1.21875e1</span>        <span class="comment">// 指数</span></span><br><span class="line"><span class="keyword">let</span> hexadecimal <span class="operator">=</span> <span class="number">0xC.3p0</span>        <span class="comment">// 十六进制</span></span><br></pre></td></tr></table></figure><h2 id="数值类型转换"><a href="#数值类型转换" class="headerlink" title="数值类型转换"></a>数值类型转换</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> twoThousand: <span class="type">UInt16</span> <span class="operator">=</span> <span class="number">2_000</span></span><br><span class="line"><span class="keyword">let</span> one: <span class="type">UInt8</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> twoThousandAndOne <span class="operator">=</span> twoThousand <span class="operator">+</span> <span class="type">UInt16</span>(one)</span><br></pre></td></tr></table></figure><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><p>类型别名为现有类型定义备用名称，可以使用typealias关键字定义类型别名。<br>想通过上下文更合适的名称来引用现有类型时，例如使用外部源中特定大小的数据时，类型别名非常有用：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">AudioSample</span> <span class="operator">=</span> <span class="type">UInt16</span></span><br></pre></td></tr></table></figure><p>定义类型别名后，可以在任何可能使用原始名称的地方使用别名：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxAmplitudeFound <span class="operator">=</span> <span class="type">AudioSample</span>.min</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="布尔值-Bool"><a href="#布尔值-Bool" class="headerlink" title="布尔值 Bool"></a>布尔值 Bool</h2><p>true 和 false</p><h2 id="数组-Tuples"><a href="#数组-Tuples" class="headerlink" title="数组 Tuples"></a>数组 Tuples</h2><p>数组将多个值分组为一个复合值。数组中的值可以是任何类型，而不必彼此相同。如果请求的网页不存在，则返回状态404 Not Found</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> http404Error <span class="operator">=</span> (<span class="number">404</span>, <span class="string">&quot;Not Found&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以将数组的内容分解为单独的常量或变量，然后像往常一样访问它们：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> (statusCode, statusMessage) <span class="operator">=</span> http404Error</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The status code is <span class="subst">\(statusCode)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The status message is <span class="subst">\(statusMessage)</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果只需要一些数组的值，则在分解数组时，请用下划线_忽略该数组的某些部分：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> (justTheStatusCode, <span class="keyword">_</span>) <span class="operator">=</span> http404Error</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The status code is <span class="subst">\(justTheStatusCode)</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者，使用从零开始的索引号访问数组中的各个元素值：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The status code is <span class="subst">\(http404Error.<span class="number">0</span>)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The status message is <span class="subst">\(http404Error.<span class="number">1</span>)</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义数组时，可以命名数组中的各个元素：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> http200Status <span class="operator">=</span> (statusCode: <span class="number">200</span>, description: <span class="string">&quot;OK&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果在数组中命名元素，则可以使用元素名称来访问这些元素的值：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The status code is <span class="subst">\(http200Status.statusCode)</span>&quot;</span>)</span><br><span class="line"><span class="comment">// Prints &quot;The status code is 200&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The status message is <span class="subst">\(http200Status.description)</span>&quot;</span>)</span><br><span class="line"><span class="comment">// Prints &quot;The status message is OK&quot;</span></span><br></pre></td></tr></table></figure><p><strong>具有多个返回值的函数使用数组特别合适。</strong><br>数组对于简单的一组相关值很有用。它们不适合创建复杂的数据结构。如果数据结构可能更复杂，则将其建模为类或结构，而不是数组。</p><h2 id="Optionals"><a href="#Optionals" class="headerlink" title="Optionals"></a>Optionals</h2><p>Optionals 表示要么有一个值并且可访问该值，或者为nil。<br>以下示例使用初始化程序尝试将 String转换为Int，由于初始化程序可能失败，因此它返回一个optional Int而不是一个Int。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> possibleNumber <span class="operator">=</span> <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="keyword">let</span> convertedNumber <span class="operator">=</span> <span class="type">Int</span>(possibleNumber)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果定义一个可选变量而不提供默认值，则该变量将自动nil设置为：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> surveyAnswer: <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line">surveyAnswer <span class="operator">=</span> <span class="literal">nil</span>        <span class="comment">// 也可以给optional赋值为nil</span></span><br></pre></td></tr></table></figure><p><strong>1. 可选值的强制展开</strong><br>一旦确定可选选项确实包含一个值，就可以<strong>在可选名称的末尾添加一个感叹号!来访问其基础值</strong>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> convertedNumber <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;convertedNumber has an integer value of <span class="subst">\(convertedNumber<span class="operator">!</span>)</span>.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. Optional 可选</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> constantName <span class="operator">=</span> someOptional &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> actualNumber <span class="operator">=</span> <span class="type">Int</span>(possibleNumber) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The string <span class="subst">\&quot;</span><span class="subst">\(possibleNumber)</span><span class="subst">\&quot;</span> has an integer value of <span class="subst">\(actualNumber)</span>&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The string <span class="subst">\&quot;</span><span class="subst">\(possibleNumber)</span><span class="subst">\&quot;</span> could not be converted to an integer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="字符串Strings"><a href="#字符串Strings" class="headerlink" title="字符串Strings"></a>字符串Strings</h1><h2 id="多行字符串文字用三引号-“””"><a href="#多行字符串文字用三引号-“””" class="headerlink" title="多行字符串文字用三引号 “””"></a>多行字符串文字用三引号 “””</h2><p>两个”””之间的字符串都作为多行字符串的值，如果仅想在代码里换行是代码易读，可以在换行符前添加反斜杠转义</p><h2 id="转义字符串"><a href="#转义字符串" class="headerlink" title="转义字符串"></a>转义字符串</h2><p>\0（空字符）<br>\（反斜杠）<br>\t（水平制表符）<br>\n（换行符）<br>\r（回车）<br>&quot;（双引号）<br>&#39;（单引号）<br>任意的Unicode标值，写为\u{n}，其中n是一个1-8位十六进制数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wiseWords <span class="operator">=</span> <span class="string">&quot;<span class="subst">\&quot;</span>Imagination is more important than knowledge<span class="subst">\&quot;</span> - Einstein&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dollarSign <span class="operator">=</span> <span class="string">&quot;<span class="subst">\u&#123;24&#125;</span>&quot;</span>        <span class="comment">// $,  Unicode scalar U+0024</span></span><br><span class="line"><span class="keyword">let</span> blackHeart <span class="operator">=</span> <span class="string">&quot;<span class="subst">\u&#123;2665&#125;</span>&quot;</span>      <span class="comment">// ♥,  Unicode scalar U+2665</span></span><br><span class="line"><span class="keyword">let</span> sparklingHeart <span class="operator">=</span> <span class="string">&quot;<span class="subst">\u&#123;1F496&#125;</span>&quot;</span> <span class="comment">// 💖, Unicode scalar U+1F496</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为多行字符串文字使用三个双引号而不是一个双引号，可以在多行字符串文字中包含一个双引号而不进行转义。</span></span><br><span class="line"><span class="keyword">let</span> threeDoubleQuotationMarks <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Escaping the first quotation mark <span class="subst">\&quot;</span>&quot;&quot;</span></span><br><span class="line"><span class="string">Escaping all three quotation marks <span class="subst">\&quot;</span><span class="subst">\&quot;</span><span class="subst">\&quot;</span></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="初始化字符串"><a href="#初始化字符串" class="headerlink" title="初始化字符串"></a>初始化字符串</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyString <span class="operator">=</span> <span class="string">&quot;&quot;</span>               <span class="comment">// 空</span></span><br><span class="line"><span class="keyword">var</span> anotherEmptyString <span class="operator">=</span> <span class="type">String</span>()  <span class="comment">// 初始化</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="访问和修改String"><a href="#访问和修改String" class="headerlink" title="访问和修改String"></a>访问和修改String</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> greeting <span class="operator">=</span> <span class="string">&quot;Guten Tag!&quot;</span></span><br><span class="line">greeting[greeting.startIndex]</span><br><span class="line"><span class="comment">// G</span></span><br><span class="line">greeting[greeting.index(before: greeting.endIndex)]</span><br><span class="line"><span class="comment">// !</span></span><br><span class="line">greeting[greeting.index(after: greeting.startIndex)]</span><br><span class="line"><span class="comment">// u</span></span><br><span class="line"><span class="keyword">let</span> index <span class="operator">=</span> greeting.index(greeting.startIndex, offsetBy: <span class="number">7</span>)</span><br><span class="line">greeting[index]</span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">greeting[greeting.endIndex] <span class="comment">// Error</span></span><br><span class="line">greeting.index(after: greeting.endIndex) <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> greeting.indices &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(greeting[index])</span> &quot;</span>, terminator: <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> greeting <span class="operator">=</span> <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line"><span class="keyword">let</span> index <span class="operator">=</span> greeting.firstIndex(of: <span class="string">&quot;,&quot;</span>) <span class="operator">??</span> greeting.endIndex</span><br><span class="line"><span class="keyword">let</span> beginning <span class="operator">=</span> greeting[<span class="operator">..&lt;</span>index]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newString <span class="operator">=</span> <span class="type">String</span>(beginning)</span><br></pre></td></tr></table></figure><p>greeting是一个字符串，具有一个存储区域，用于存储组成该字符串的字符。因为beginning是的子字符串greeting，所以它重复使用了所greeting使用的内存。相反，newString是一个字符串-从子字符串创建它时，它具有自己的存储空间。<br>准备长时间存储结果时，可以将子字符串转换为字符串</p><h2 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h2><p>可以用 == 或者 !=</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line"><span class="keyword">let</span> str1 <span class="operator">=</span> <span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line"><span class="keyword">if</span> str <span class="operator">==</span> str1 &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;相等&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>三种collection： array有序集合, set唯一值的无序集合, dictionary键-值对关联的无序集合。</p><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr <span class="operator">=</span> <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;    <span class="comment">// 空数组，两种方式，一般采用[]</span></span><br><span class="line"><span class="keyword">var</span> someInts <span class="operator">=</span> [<span class="type">Int</span>]()  <span class="comment">// 简写</span></span><br><span class="line">someInts.append(<span class="number">3</span>)      </span><br><span class="line">someInts <span class="operator">=</span> []           </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> threeDoubles <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="number">0.0</span>, count: <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> anotherThreeDoubles <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="number">2.5</span>, count: <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sixDoubles <span class="operator">=</span> threeDoubles <span class="operator">+</span> anotherThreeDoubles</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>增删改查</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shoppingList: [<span class="type">String</span>] <span class="operator">=</span> [<span class="string">&quot;Eggs&quot;</span>, <span class="string">&quot;Milk&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shoppingList <span class="operator">=</span> [<span class="string">&quot;Eggs&quot;</span>, <span class="string">&quot;Milk&quot;</span>]  <span class="comment">// 类型推断</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The shopping list contains <span class="subst">\(shoppingList.count)</span> items.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> shoppingList.isEmpty &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The shopping list is empty.&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The shopping list is not empty.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shoppingList.append(<span class="string">&quot;Flour&quot;</span>)</span><br><span class="line"></span><br><span class="line">shoppingList <span class="operator">+=</span> [<span class="string">&quot;Baking Powder&quot;</span>]</span><br><span class="line"></span><br><span class="line">shoppingList <span class="operator">+=</span> [<span class="string">&quot;Chocolate Spread&quot;</span>, <span class="string">&quot;Cheese&quot;</span>, <span class="string">&quot;Butter&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstItem <span class="operator">=</span> shoppingList[<span class="number">0</span>]</span><br><span class="line">shoppingList[<span class="number">0</span>] <span class="operator">=</span> <span class="string">&quot;Six eggs&quot;</span></span><br><span class="line"></span><br><span class="line">shoppingList[<span class="number">4</span><span class="operator">...</span><span class="number">6</span>] <span class="operator">=</span> [<span class="string">&quot;Bananas&quot;</span>, <span class="string">&quot;Apples&quot;</span>]</span><br><span class="line"><span class="comment">// 将索引[4,6]的元素换成[&quot;Bananas&quot;, &quot;Apples&quot;] </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// insert和remove操作后，其他元素顺移</span></span><br><span class="line">shoppingList.insert(<span class="string">&quot;Maple Syrup&quot;</span>, at: <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 索引0位置插入为&quot;Maple Syrup&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mapleSyrup <span class="operator">=</span> shoppingList.remove(at: <span class="number">0</span>)</span><br><span class="line"><span class="comment">//  删除索引0位置的元素，并且返回该位置元素的值</span></span><br><span class="line"><span class="keyword">let</span> apples <span class="operator">=</span> shoppingList.removeLast()  <span class="comment">//避免查询.count检查是否越界</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> shoppingList &#123;</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (index, value) <span class="keyword">in</span> shoppingList.enumerated() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Item <span class="subst">\(index <span class="operator">+</span> <span class="number">1</span>)</span>: <span class="subst">\(value)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>类型必须是可哈希的才能存储在Set中</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> letters <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;()  <span class="comment">// Set没有简写</span></span><br><span class="line">letters.insert(<span class="string">&quot;a&quot;</span>) </span><br><span class="line">letters <span class="operator">=</span> []        </span><br></pre></td></tr></table></figure><p>增删改查</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> favoriteGenres: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; <span class="operator">=</span> [<span class="string">&quot;Rock&quot;</span>, <span class="string">&quot;Classical&quot;</span>, <span class="string">&quot;Hip hop&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> favoriteGenres: <span class="type">Set</span> <span class="operator">=</span> [<span class="string">&quot;Rock&quot;</span>, <span class="string">&quot;Classical&quot;</span>, <span class="string">&quot;Hip hop&quot;</span>]  <span class="comment">//类型推断</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I have <span class="subst">\(favoriteGenres.count)</span> favorite music genres.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> favoriteGenres.isEmpty &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;As far as music goes, I&#x27;m not picky.&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I have particular music preferences.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">favoriteGenres.insert(<span class="string">&quot;Jazz&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// .removeAll()删除全部元素</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> removedGenre <span class="operator">=</span> favoriteGenres.remove(<span class="string">&quot;Rock&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(removedGenre)</span>? I&#x27;m over it.&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I never much cared for that.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> favoriteGenres.contains(<span class="string">&quot;Funk&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I get up on the good foot.&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;It&#x27;s too funky in here.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> genre <span class="keyword">in</span> favoriteGenres &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(genre)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> genre <span class="keyword">in</span> favoriteGenres.sorted() &#123;  <span class="comment">// 按&lt;的顺序返回</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(genre)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><code>intersection(_:)</code>方法创建仅具有两个集合共有的值的新集合。</p></li><li><p><code>symmetricDifference(_:)</code>方法创建一个新集合，其中两个集合中都有一个值，但不能同时包含两个集合中的值。</p></li><li><p><code>union(_:)</code>方法创建一个包含两个集合中所有值的新集合。</p></li><li><p><code>subtracting(_:)</code>方法创建一个新集合，其值不在指定集合中。</p></li><li><p><code>==</code>确定两组是否包含所有相同的值。</p></li><li><p><code>isSubset(of:)</code>方法确定集合中的所有值是否都包含在指定集合中。</p></li><li><p><code>isSuperset(of:)</code>方法确定集合是否包含指定集合中的所有值。</p></li><li><p><code>isStrictSubset(of:)</code>或<code>isStrictSuperset(of:)</code>方法确定集合是子集还是超集，但不等于指定的集合。</p></li><li><p><code>isDisjoint(with:)</code>方法确定两个集合是否没有共同的值。</p></li></ul><h2 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h2><p>字典Key类型必须符合Hashable协议</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dic <span class="operator">=</span> <span class="type">Dictionary</span>&lt;<span class="type">Key</span>, <span class="type">Value</span>&gt;</span><br><span class="line"><span class="keyword">var</span> namesOfIntegers <span class="operator">=</span> [<span class="type">Int</span>: <span class="type">String</span>]()   <span class="comment">// 简写</span></span><br><span class="line"></span><br><span class="line">namesOfIntegers[<span class="number">16</span>] <span class="operator">=</span> <span class="string">&quot;sixteen&quot;</span></span><br><span class="line"></span><br><span class="line">namesOfIntegers <span class="operator">=</span> [:]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>增删改查</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> airports: [<span class="type">String</span>: <span class="type">String</span>] <span class="operator">=</span> [<span class="string">&quot;YYZ&quot;</span>: <span class="string">&quot;Toronto Pearson&quot;</span>, <span class="string">&quot;DUB&quot;</span>: <span class="string">&quot;Dublin&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> airports <span class="operator">=</span> [<span class="string">&quot;YYZ&quot;</span>: <span class="string">&quot;Toronto Pearson&quot;</span>, <span class="string">&quot;DUB&quot;</span>: <span class="string">&quot;Dublin&quot;</span>]</span><br><span class="line"><span class="comment">// 当key和value是同一类型的时候，swift可以进行类型推断</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The airports dictionary contains <span class="subst">\(airports.count)</span> items.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> airports.isEmpty &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The airports dictionary is empty.&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The airports dictionary is not empty.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">airports[<span class="string">&quot;LHR&quot;</span>] <span class="operator">=</span> <span class="string">&quot;London&quot;</span></span><br><span class="line"></span><br><span class="line">airports[<span class="string">&quot;LHR&quot;</span>] <span class="operator">=</span> <span class="string">&quot;London Heathrow&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> oldValue <span class="operator">=</span> airports.updateValue(<span class="string">&quot;Dublin Airport&quot;</span>, forKey: <span class="string">&quot;DUB&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The old value for DUB was <span class="subst">\(oldValue)</span>.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// updateValue(_:forKey:)方法返回字典值类型的可选值。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> airportName <span class="operator">=</span> airports[<span class="string">&quot;DUB&quot;</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The name of the airport is <span class="subst">\(airportName)</span>.&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;That airport is not in the airports dictionary.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">airports[<span class="string">&quot;APL&quot;</span>] <span class="operator">=</span> <span class="string">&quot;Apple International&quot;</span></span><br><span class="line"></span><br><span class="line">airports[<span class="string">&quot;APL&quot;</span>] <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> removedValue <span class="operator">=</span> airports.removeValue(forKey: <span class="string">&quot;DUB&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The removed airport&#x27;s name is <span class="subst">\(removedValue)</span>.&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The airports dictionary does not contain a value for DUB.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (airportCode, airportName) <span class="keyword">in</span> airports &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(airportCode)</span>: <span class="subst">\(airportName)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> airportCode <span class="keyword">in</span> airports.keys &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Airport code: <span class="subst">\(airportCode)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> airportName <span class="keyword">in</span> airports.values &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Airport name: <span class="subst">\(airportName)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Swift的Dictionary类型没有定义的顺序。要以特定顺序遍历字典的键或值，可以在keys或values属性上使用sorted()。</p><h1 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h1><h2 id="for-in-循环"><a href="#for-in-循环" class="headerlink" title="for in 循环"></a>for in 循环</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(index)</span> times 5 is <span class="subst">\(index <span class="operator">*</span> <span class="number">5</span>)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// index是一个常数无需声明</span></span><br><span class="line"><span class="keyword">let</span> base <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> power <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> answer <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span>power &#123;</span><br><span class="line">    answer <span class="operator">*=</span> base</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果不需要索引值，怎可以使用 下划线_ 代替</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> minutes <span class="operator">=</span> <span class="number">60</span></span><br><span class="line"><span class="keyword">for</span> tickMark <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>minutes &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> minuteInterval <span class="operator">=</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> tickMark <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">0</span>, to: minutes, by: minuteInterval) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hours <span class="operator">=</span> <span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> hourInterval <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> tickMark <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">3</span>, through: hours, by: hourInterval) &#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="While-循环"><a href="#While-循环" class="headerlink" title="While 循环"></a>While 循环</h2><ul><li>while 每次循环执行时都会评估其条件。</li><li>repeat- while在每次循环结束时评估其条件。在考虑循环条件之前，会先执行一次循环循环。然后，它将继续重复循环，直到条件为false。类似于 do - while</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125; <span class="keyword">while</span> condition</span><br></pre></td></tr></table></figure><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>多个判断条件可以用逗号连接</p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>break在Swift中不是必需的，但是可以使用break语句来匹配和忽略特定的情况，或者在该情况完成执行之前中断匹配的情况。<br>每个case都必须包含一个可执行语句，一个case两种value用逗号隔开</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> <span class="keyword">some</span> value to consider &#123;</span><br><span class="line"><span class="keyword">case</span> value <span class="number">1</span>:</span><br><span class="line">    respond to value <span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> value <span class="number">2</span>,</span><br><span class="line">     value <span class="number">3</span>:</span><br><span class="line">    respond to value <span class="number">2</span> or <span class="number">3</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    otherwise, <span class="keyword">do</span> something <span class="keyword">else</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//间隔匹配</span></span><br><span class="line"><span class="keyword">let</span> approximateCount <span class="operator">=</span> <span class="number">62</span></span><br><span class="line"><span class="keyword">let</span> countedThings <span class="operator">=</span> <span class="string">&quot;moons orbiting Saturn&quot;</span></span><br><span class="line"><span class="keyword">let</span> naturalCount: <span class="type">String</span></span><br><span class="line"><span class="keyword">switch</span> approximateCount &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    naturalCount <span class="operator">=</span> <span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span><span class="operator">..&lt;</span><span class="number">5</span>:</span><br><span class="line">    naturalCount <span class="operator">=</span> <span class="string">&quot;a few&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span><span class="operator">..&lt;</span><span class="number">12</span>:</span><br><span class="line">    naturalCount <span class="operator">=</span> <span class="string">&quot;several&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span><span class="operator">..&lt;</span><span class="number">100</span>:</span><br><span class="line">    naturalCount <span class="operator">=</span> <span class="string">&quot;dozens of&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">100</span><span class="operator">..&lt;</span><span class="number">1000</span>:</span><br><span class="line">    naturalCount <span class="operator">=</span> <span class="string">&quot;hundreds of&quot;</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    naturalCount <span class="operator">=</span> <span class="string">&quot;many&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;There are <span class="subst">\(naturalCount)</span> <span class="subst">\(countedThings)</span>.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> somePoint <span class="operator">=</span> (<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">switch</span> somePoint &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(somePoint)</span> is at the origin&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> (<span class="keyword">_</span>, <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(somePoint)</span> is on the x-axis&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="keyword">_</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(somePoint)</span> is on the y-axis&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> (<span class="operator">-</span><span class="number">2</span><span class="operator">...</span><span class="number">2</span>, <span class="operator">-</span><span class="number">2</span><span class="operator">...</span><span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(somePoint)</span> is inside the box&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(somePoint)</span> is outside of the box&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(0，0）可以匹配所有四种情况。但是，如果可能有多个匹配项，则始终使用第一个匹配情况，所有其他匹配情况都将被忽略。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>只用return一行编写的任何函数都可以省略return。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有参数</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">sayHelloWorld</span>() -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello, world&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个参数</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">greet</span>(<span class="params">person</span>: <span class="type">String</span>, <span class="params">alreadyGreeted</span>: <span class="type">Bool</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> alreadyGreeted &#123;</span><br><span class="line">        <span class="keyword">return</span> greetAgain(person: person)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> greet(person: person)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有返回值</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">greet</span>(<span class="params">person</span>: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, <span class="subst">\(person)</span>!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">printAndCount</span>(<span class="params">string</span>: <span class="type">String</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(string)</span><br><span class="line">    <span class="keyword">return</span> string.count</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">printWithoutCounting</span>(<span class="params">string</span>: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> printAndCount(string: string)</span><br><span class="line">&#125;</span><br><span class="line">printAndCount(string: <span class="string">&quot;hello, world&quot;</span>)</span><br><span class="line"></span><br><span class="line">printWithoutCounting(string: <span class="string">&quot;hello, world&quot;</span>)</span><br></pre></td></tr></table></figure><p>第一个函数printAndCount(string:)打印一个字符串，然后将其字符计数返回为Int。第二个函数printWithoutCounting(string:)调用第一个函数，但忽略其返回值。当调用第二个函数时，第一个函数仍会打印该消息，但是不使用返回的值。</p><h3 id="具有多个返回值的函数"><a href="#具有多个返回值的函数" class="headerlink" title="具有多个返回值的函数"></a>具有多个返回值的函数</h3><p>可以使用数组类型作为函数的返回类型，以将多个值作为一个复合返回值的一部分返回。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">minMax</span>(<span class="params">array</span>: [<span class="type">Int</span>]) -&gt; (min: <span class="type">Int</span>, max: <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> currentMin <span class="operator">=</span> array[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">var</span> currentMax <span class="operator">=</span> array[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> array[<span class="number">1</span><span class="operator">..&lt;</span>array.count] &#123;</span><br><span class="line">        <span class="keyword">if</span> value <span class="operator">&lt;</span> currentMin &#123;</span><br><span class="line">            currentMin <span class="operator">=</span> value</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> value <span class="operator">&gt;</span> currentMax &#123;</span><br><span class="line">            currentMax <span class="operator">=</span> value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (currentMin, currentMax)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bounds <span class="operator">=</span> minMax(array: [<span class="number">8</span>, <span class="operator">-</span><span class="number">6</span>, <span class="number">2</span>, <span class="number">109</span>, <span class="number">3</span>, <span class="number">71</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;min is <span class="subst">\(bounds.min)</span> and max is <span class="subst">\(bounds.max)</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在从函数返回数组时不必命名数组的成员，因为它们的名称已作为函数返回类型的一部分指定。</p><h3 id="返回Optional"><a href="#返回Optional" class="headerlink" title="返回Optional"></a>返回Optional</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">minMax</span>(<span class="params">array</span>: [<span class="type">Int</span>]) -&gt; (min: <span class="type">Int</span>, max: <span class="type">Int</span>)<span class="operator">?</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> array.isEmpty &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> currentMin <span class="operator">=</span> array[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">var</span> currentMax <span class="operator">=</span> array[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> array[<span class="number">1</span><span class="operator">..&lt;</span>array.count] &#123;</span><br><span class="line">        <span class="keyword">if</span> value <span class="operator">&lt;</span> currentMin &#123;</span><br><span class="line">            currentMin <span class="operator">=</span> value</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> value <span class="operator">&gt;</span> currentMax &#123;</span><br><span class="line">            currentMax <span class="operator">=</span> value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (currentMin, currentMax)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> bounds <span class="operator">=</span> minMax(array: [<span class="number">8</span>, <span class="operator">-</span><span class="number">6</span>, <span class="number">2</span>, <span class="number">109</span>, <span class="number">3</span>, <span class="number">71</span>]) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;min is <span class="subst">\(bounds.min)</span> and max is <span class="subst">\(bounds.max)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>由函数的参数类型和返回类型组成，如(Int, Int) -&gt; Int</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// () -&gt; Void</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">printHelloWorld</span>() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello, world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用函数类型"><a href="#使用函数类型" class="headerlink" title="使用函数类型"></a>使用函数类型</h3><p>可以将常量或变量定义为函数类型，然后为该变量分配适当的函数：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mathFunction: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="operator">=</span> addTwoInts</span><br></pre></td></tr></table></figure><p>“定义一个名为mathFunction的变量，其类型为一个具有两个Int值并返回Int值的函数。” 设置这个变量来表示函数addTwoInts。”</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Result: <span class="subst">\(mathFunction(<span class="number">2</span>, <span class="number">3</span>))</span>&quot;</span>)  <span class="comment">// Prints &quot;Result: 5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anotherMathFunction <span class="operator">=</span> addTwoInts  <span class="comment">// 类型推断</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Function-Types作为另一个函数的参数类型"><a href="#Function-Types作为另一个函数的参数类型" class="headerlink" title="Function Types作为另一个函数的参数类型"></a>Function Types作为另一个函数的参数类型</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">printMathResult</span>(<span class="keyword">_</span> <span class="params">mathFunction</span>: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">a</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">b</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Result: <span class="subst">\(mathFunction(a, b))</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">printMathResult(addTwoInts, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义了一个名为printMathResult(<em>:</em>:_:)的函数，该函数具有三个参数。第一个参数名为mathFunction，类型为(Int, Int) -&gt; Int。第二个和第三个参数分别名为a和b，并且均为type Int。</p><h3 id="Function-Types作为返回类型"><a href="#Function-Types作为返回类型" class="headerlink" title="Function Types作为返回类型"></a>Function Types作为返回类型</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">stepForward</span>(<span class="keyword">_</span> <span class="params">input</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> input <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">stepBackward</span>(<span class="keyword">_</span> <span class="params">input</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> input <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">chooseStepFunction</span>(<span class="params">backward</span>: <span class="type">Bool</span>) -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> backward <span class="operator">?</span> stepBackward : stepForward</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> currentValue <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> moveNearerToZero <span class="operator">=</span> chooseStepFunction(backward: currentValue <span class="operator">&gt;</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Counting to zero:&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> currentValue <span class="operator">!=</span> <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(currentValue)</span>... &quot;</span>)</span><br><span class="line">    currentValue <span class="operator">=</span> moveNearerToZero(currentValue)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;zero!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">chooseStepFunction</span>(<span class="params">backward</span>: <span class="type">Bool</span>) -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">stepForward</span>(<span class="params">input</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; <span class="keyword">return</span> input <span class="operator">+</span> <span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">stepBackward</span>(<span class="params">input</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; <span class="keyword">return</span> input <span class="operator">-</span> <span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">return</span> backward <span class="operator">?</span> stepBackward : stepForward</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> currentValue <span class="operator">=</span> <span class="operator">-</span><span class="number">4</span></span><br><span class="line"><span class="keyword">let</span> moveNearerToZero <span class="operator">=</span> chooseStepFunction(backward: currentValue <span class="operator">&gt;</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> currentValue <span class="operator">!=</span> <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(currentValue)</span>... &quot;</span>)</span><br><span class="line">    currentValue <span class="operator">=</span> moveNearerToZero(currentValue)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;zero!&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">CompassPoint</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> north</span><br><span class="line">    <span class="keyword">case</span> south</span><br><span class="line">    <span class="keyword">case</span> east</span><br><span class="line">    <span class="keyword">case</span> west</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> directionToHead <span class="operator">=</span> <span class="type">CompassPoint</span>.west</span><br><span class="line">directionToHead <span class="operator">=</span> .east     <span class="comment">// 类型推断</span></span><br><span class="line"></span><br><span class="line">directionToHead <span class="operator">=</span> .south</span><br><span class="line"><span class="keyword">switch</span> directionToHead &#123;</span><br><span class="line"><span class="keyword">case</span> .north:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Lots of planets have a north&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> .south:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Watch out for penguins&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> .east:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Where the sun rises&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> .west:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Where the skies are blue&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历枚举"><a href="#遍历枚举" class="headerlink" title="遍历枚举"></a>遍历枚举</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Beverage</span>: <span class="title class_">CaseIterable</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> coffee, tea, juice</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> numberOfChoices <span class="operator">=</span> <span class="type">Beverage</span>.allCases.count</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(numberOfChoices)</span> beverages available&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> beverage <span class="keyword">in</span> <span class="type">Beverage</span>.allCases &#123;</span><br><span class="line">    <span class="built_in">print</span>(beverage)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="结构体和类"><a href="#结构体和类" class="headerlink" title="结构体和类"></a>结构体和类</h1><p>Swift不需要为自定义结构和类创建单独的接口和实现文件，<strong>可以在单个文件中定义结构或类，并且该类或结构的外部接口会自动提供给其他代码使用。</strong></p><h2 id="struct和class的共同点和区别"><a href="#struct和class的共同点和区别" class="headerlink" title="struct和class的共同点和区别"></a>struct和class的共同点和区别</h2><p>class具有struct没有的其他功能：</p><ul><li>继承使一个类可以继承另一个类的特征。</li><li>通过类型转换，可以在运行时检查和解释类实例的类型。</li><li>反初始化程序使类的实例可以释放其已分配的所有资源。</li><li>引用计数允许对一个类实例进行多个引用。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Resolution</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> width <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> height <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoMode</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> resolution <span class="operator">=</span> <span class="type">Resolution</span>()</span><br><span class="line">    <span class="keyword">var</span> interlaced <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> frameRate <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例（对象）</span></span><br><span class="line"><span class="keyword">let</span> someResolution <span class="operator">=</span> <span class="type">Resolution</span>()</span><br><span class="line"><span class="keyword">let</span> someVideoMode <span class="operator">=</span> <span class="type">VideoMode</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问属性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The width of someResolution is <span class="subst">\(someResolution.width)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The width of someVideoMode is <span class="subst">\(someVideoMode.resolution.width)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">someVideoMode.resolution.width <span class="operator">=</span> <span class="number">1280</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The width of someVideoMode is now <span class="subst">\(someVideoMode.resolution.width)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// struct具有Initializers，class需要init</span></span><br><span class="line"><span class="keyword">let</span> vga <span class="operator">=</span> <span class="type">Resolution</span>(width: <span class="number">640</span>, height: <span class="number">480</span>)</span><br></pre></td></tr></table></figure><h2 id="struct和enum是值类型"><a href="#struct和enum是值类型" class="headerlink" title="struct和enum是值类型"></a>struct和enum是值类型</h2><p>Swift中的所有基本类型（整数，浮点数，布尔值，字符串，数组和字典）都是值类型，所有结struct和enum都是值类型。。</p><h2 id="class是引用类型"><a href="#class是引用类型" class="headerlink" title="class是引用类型"></a>class是引用类型</h2><p>与值类型不同，将引用类型分配给var或let或将其传递给函数时，不会复制引用类型，而是都是同一个实例的引用。</p><p>可以通过 <code>===</code> 或者 <code>!==</code> 比较两个是否引用相同的实例<br> <code>===</code> 表示var或者let都引用同一个实例，而<code>==</code>表示两个实例的值相等</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> tenEighty <span class="operator">===</span> alsoTenEighty &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tenEighty and alsoTenEighty refer to the same VideoMode instance.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;swift-笔记&quot;&gt;&lt;a href=&quot;#swift-笔记&quot; class=&quot;headerlink&quot; title=&quot;swift 笔记&quot;&gt;&lt;/a&gt;swift 笔记&lt;/h1&gt;&lt;h1 id=&quot;基础介绍&quot;&gt;&lt;a href=&quot;#基础介绍&quot; class=&quot;headerlink&quot; title=&quot;基础介绍&quot;&gt;&lt;/a&gt;基础介绍&lt;/h1&gt;&lt;h2 id=&quot;常量let-amp-变量var&quot;&gt;&lt;a href=&quot;#常量let-amp-变量var&quot; class=&quot;headerlink&quot; title=&quot;常量let &amp;amp; 变量var&quot;&gt;&lt;/a&gt;常量let &amp;amp; 变量var&lt;/h2&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 常量的值设定后不能更改&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, y &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, z &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; red, green, blue: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 理论上可以实际很少这么写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;常量和变量名可以包含任何字符，包括一些Unicode字符。&lt;strong&gt;常量和变量名不能包含空格，数学符号，箭头，专用的Unicode标量值或线条和框形图字符，不能以数字开头&lt;/strong&gt;。不能将常量更改为变量或将变量更改为常量。如果需要命名为保留的Swift关键字名称，在关键字两端加上反引号`，不建议使用保留的关键字。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Swift语言" scheme="http://yoursite.com/tags/Swift%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>咖啡</title>
    <link href="http://yoursite.com/2022/02/19/%E5%92%96%E5%95%A1/"/>
    <id>http://yoursite.com/2022/02/19/%E5%92%96%E5%95%A1/</id>
    <published>2022-02-19T08:28:57.000Z</published>
    <updated>2022-02-19T09:01:25.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="咖啡的小知识"><a href="#咖啡的小知识" class="headerlink" title="咖啡的小知识"></a>咖啡的小知识</h1><p>原材料：咖啡从树上结果，生的状态一般叫绿咖啡Green coffee<br>咖啡两大类：Arabica阿拉比卡和Robusta罗布斯塔。前者比后者更优质<br>咖啡因的含量和风味不同。一般Robusta豆的咖啡因比Arabica豆要高。<br>Robusta主要产地是东半球越南、非洲。Arabica糖和脂多主要产地牙买加、夏威夷。品牌：蓝山、曼特宁、科纳。<br>咖啡树热带植物<br>煮的咖啡brewed coffee<br>light/blonde轻度烘焙；medium中度烘焙；dark roast重度烘焙<br>酸涩感：轻度&gt;中度&gt;重度<br>冲煮专业名词都为萃取<br>浸泡式brewed<br>意式浓缩espresso【可以搭配奶、巧克力酱】拿铁、摩卡、卡布奇诺</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;咖啡的小知识&quot;&gt;&lt;a href=&quot;#咖啡的小知识&quot; class=&quot;headerlink&quot; title=&quot;咖啡的小知识&quot;&gt;&lt;/a&gt;咖啡的小知识&lt;/h1&gt;&lt;p&gt;原材料：咖啡从树上结果，生的状态一般叫绿咖啡Green coffee&lt;br&gt;咖啡两大类：Arabica阿拉比</summary>
      
    
    
    
    
    <category term="小知识" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>搬家清单</title>
    <link href="http://yoursite.com/2022/02/19/%E6%90%AC%E5%AE%B6%E6%B8%85%E5%8D%95/"/>
    <id>http://yoursite.com/2022/02/19/%E6%90%AC%E5%AE%B6%E6%B8%85%E5%8D%95/</id>
    <published>2022-02-19T07:47:37.000Z</published>
    <updated>2022-02-24T09:10:25.346Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搬家全流程-MARK"><a href="#搬家全流程-MARK" class="headerlink" title="搬家全流程 MARK"></a>搬家全流程 MARK</h1><hr><h2 id="找房"><a href="#找房" class="headerlink" title="找房"></a><strong>找房</strong></h2><ul><li>弄清需求，找房，砍价，签约，定搬家日期，定下一个给新家买新东西的预算（不然会很没有概念毫无节制的买买买）</li></ul><h2 id="搬家前准备-1"><a href="#搬家前准备-1" class="headerlink" title="搬家前准备 1"></a><strong>搬家前准备 1</strong></h2><ul><li>基础清洁/深度清洁<ul><li>清掉新家用不掉的东西</li><li>做新家清洁（先上到下，先天花板再地面）<ul><li>容易忽视的重点：插座消毒，空调遥控器消毒，门把手消毒（最容易藏细菌但是最容易被忽略的角落）</li><li>换掉皮肤直接接触的东西：马桶盖等</li><li>找人洗空调洗洗衣机</li><li>地板使用消毒水清洁</li></ul></li><li>检查新家各个角落，特别是柜子角落和抽屉等，是否有蟑螂，进行消杀步骤。蟑螂药蟑螂屋都可。</li></ul></li></ul><span id="more"></span><h2 id="搬家前准备-2"><a href="#搬家前准备-2" class="headerlink" title="搬家前准备 2"></a><strong>搬家前准备 2</strong></h2><ul><li>1、旧家断舍离<ul><li>搬家前先做断舍离，已经坏了但是感觉还用得上东西这个时候就下决心丢掉吧，去了新家大概率也不会用啦。搬过去再丢不仅麻烦还增加打包和后续归位的工作。</li><li>闲置的电器挂闲鱼</li><li>不穿的衣服去闲鱼旧衣回收/飞蚂蚁等</li><li>看完不再需要的书放多抓鱼等</li></ul></li><li>2、旧家不再采买<ul><li>定下搬家时间后，开始适当进行不再采买规则，特别是厨房这边，先消耗掉现有的食物干货米面等等。</li><li>清理冰箱，记下需要早点消耗掉冷冻品等，不要买新的冻品。方便后续搬家。</li></ul></li><li>3、打包前的准备<ul><li>开始积累快递大箱子和快递里的防震膜了，积累到打包的时候用。</li><li>搬家工具购买（按实际情况，按需选择）<ol><li>工业保鲜膜：包裹物品用-非常好用，搬家必备</li><li>气泡膜：打包易碎品用</li><li>透明大胶带：封箱用，也用在保鲜膜裹完之后不太那么结实的物品上，如果用到的纸箱很多可以再买一个切割器。</li><li>黑色大垃圾袋：买结实一点的，装重量轻体积大的东西（棉被，玩偶），后续还可以当垃圾袋再使用。</li><li>编织袋：买结实一点的，装衣服用，装包和鞋子。</li><li>纸箱：大多是厨房用，装易碎品，可以先收集自己快递的，或者去超市问老板买几个。不要买太大，难搬运。</li><li>透明细胶带：我们打包大植物辅助用的，没有植物可以不买。</li><li>不要的杂志/书：作用类似气泡膜防碎膜，塞缝隙边角等，废物利用。</li></ol></li></ul></li></ul><h2 id="搬家打包环节"><a href="#搬家打包环节" class="headerlink" title="搬家打包环节"></a><strong>搬家打包环节</strong></h2><ul><li>我们的打包原则：<ol><li>原样打包，减少后续归位和安装工作，比如衣服和衣架一起包。比如厨房抽屉、收纳盒</li><li>小件易碎用纸箱，大件较轻用编织袋。</li><li>同类形状合并包，比如长杠杠，比如装饰画。</li><li>同类形状套着包，比如厨房的大盆，比如烤盘</li><li>塞满缝隙基本不会错，不管是箱子还是抽屉等。</li><li>不同形状单个包再整体包</li><li>为方便搬运考虑，可以适当 <code>自制</code> 提手</li></ol></li><li>搬家打包场景：厨房<ol><li>易碎品 + 杂物较多，打包工具：用到箱子，气泡膜，保鲜膜，打包动作：包起来，叠着放，塞缝隙。</li><li>杯子，用气泡膜单个包，箱子先铺一层气泡膜，依次放进去杯子，尽量挤到刚刚好，不留缝隙。</li><li>盘子，箱子还是用气泡膜铺底，盘子是叠放的，气泡膜剪成正方形，放盘子中间隔着，空余缝隙再包好其他小东西放进去，最后的小缝隙撕纸张揉成团塞进去，尽量做到不留缝隙再封箱。</li><li>其他大盆大锅，叠着放，再统一用保鲜膜缠起来，保鲜膜自带粘性，不用胶带也可以包得很结实。</li><li>收纳盒，小的叠大的，空余空间再放一些不易碎的东西。</li><li>杂物抽屉，里面的东西保持原样，往里面塞纸团防止搬运震动，再东西+抽屉一起保鲜膜包，把缝隙塞满，基本不会有太大问题。</li><li>其他杂物，不同形状的东西单个包，再整体包。</li><li>全部打包好的箱子可以随手记一下编号这样（厨房1，厨房2，厨房3），我们是用手机拍了箱子内容物，再在照片标注物品，后续用图片来查找。</li></ol></li><li>搬家打包场景：客厅<ol><li>大件东西多，杂物多，打包工具：用到保鲜膜，胶带，气泡膜；打包原则：原样打包，同类叠着包，异形单独包再合并包。</li><li>如果有全屋装饰画，统一叠着，用保鲜膜包好，再用大胶带加固，用胶带粘了一个把手，搬运的时候方便提着。</li><li>置物架，拆掉方便搬运，减少磕碰损坏。拆掉部件统一用胶带缠好，螺丝零件用袋子包好，置物架部件+对应螺丝贴到一起，方便后续安装。</li><li>植物，形状也不规则，包装的时候最好是两个人配合，一个人先用气泡膜轻轻围住叶子部分，另一个人用细胶布缠绕，细胶带比较细，容易顺着植物的造型贴合贴紧，可以减少叶子的损害。 搬家前一个星期最好不要浇水，这样土不含水，轻，也好搬运。</li><li>电器类，有原包装的放回原包装。没有包装的包上气泡膜贴好，放到箱子里，箱子做重点标记。</li><li>书类，用行李箱装，结实，而且有轮子，方便拖。不过搬运师傅都是采用背的方式，有轮子对他们来说作用不是非常大。</li><li>全身镜，用了气泡膜认真包，易碎类马虎不得。</li></ol></li><li>搬家打包场景：卧室<ol><li>体积大重量轻的东西较多；打包工具：编织袋，黑色大垃圾袋；打包原则，原样打包，不怕碎统一装</li><li>衣服。</li><li>衣服架子，拆下来并到一起，保鲜膜包住，再贴紧。 这边就比较简单粗暴，是衣服连同衣架直接取下来，然后放到编织袋里去。到了新家就可以直接取出来挂上了。</li><li>包，用平时买衣服收到的布袋子装，防止刮花包表面，统一放编织袋提走了。包怕压，袋子上贴一个手写提醒师傅，装车的时候不要压这个。怕压变形可以放纸箱子。</li><li>鞋子，方法同包。</li><li>带抽屉的收纳柜，直接用保鲜膜裹紧，如果抽屉里比较空，可以先用纸团或者气泡膜塞一下再包。</li><li>棉被，压缩袋压缩，再装到黑色垃圾袋里。</li><li>玩偶，方法同棉被。</li><li>手帐用品，箱子装，箱子先垫防碎膜，手帐胶带和工具一起放，剪碎珍珠膜或者纸团塞缝隙再封口。</li><li>地毯，叠在一起放，最大张放下面，其他尺寸放上面，然后卷起来，用保鲜膜包住。记得正面对正面，背面贴背面。</li><li>一些不规则但是不太重的物品，先用保鲜膜包裹，再用用大胶带贴紧，同时贴出一些提手，方便搬运的时候提。</li></ol></li><li>搬家打包场景：厕所<ul><li>沐浴露洗衣液这类，新家旧家离得不远，是直接放到一个桶装完提上车就搞完了。</li><li>如果新家距离比较远，还是单独把按压口处理一下，缠保鲜膜，或者直接按压锁住，再做包装。</li></ul></li></ul><h2 id="搬家前几日"><a href="#搬家前几日" class="headerlink" title="搬家前几日"></a><strong>搬家前几日</strong></h2><ul><li>提前确定新家和旧家楼下是否能停你叫的搬家车辆（不能停，可能会有路面费产生，一般超30米就会收）</li><li>找物业开好放行条</li><li>和师傅确定搬家细节（一般师傅会提前联系，真实说清楚，说少说小了，师傅现场要求加钱我们就被动了）</li><li>联系好来帮忙的朋友，找好请朋友吃饭的地方</li></ul><h2 id="搬家当天"><a href="#搬家当天" class="headerlink" title="搬家当天"></a><strong>搬家当天</strong></h2><ul><li>全部清点物品数量，手机拍照+拍视频保存留底。</li><li>给师傅买好饮料</li><li>可能整个过程会发生小问题，保持平稳心态处理，加油加油</li></ul><h2 id="搬家公司选择"><a href="#搬家公司选择" class="headerlink" title="搬家公司选择"></a><strong>搬家公司选择</strong></h2><ul><li>避雷点<ol><li>不要找按小时计费的搬家公司，因为时间不受你控制，师傅大概率会拖沓 ，而且也拿他办法（可能是我们不会沟通）而且计时过程中，堵车等这类不受控情况，也是要算钱的。</li><li>最终确定搬家公司前，尽量问好详细的收费模式，多问清楚，有些隐藏收费不问他们不会主动说。</li><li>不要让搬家公司打包装，尽量自己包装好，搬家公司包装收费特别贵。</li><li>注意搬家货车的停车位置，这个也是最容易产生 <code>额外</code> 费用的点。定搬家公司前先去旧家和新家和物业确定，楼下能不能停车，最大能停多大的车，如果车停不下或者不能停，车停的距离如果大于30米，一般需要再次收路面费。</li><li>一口价的公司可能会对大件的家电（空调洗衣机这些）额外收费，具体可以先和师傅/客服沟通好。</li><li>最好是走搬家平台，出了问题相对好解决一些，平台约束。</li></ol></li></ul><h2 id="搬家后归位"><a href="#搬家后归位" class="headerlink" title="搬家后归位"></a>搬家后归位</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;搬家全流程-MARK&quot;&gt;&lt;a href=&quot;#搬家全流程-MARK&quot; class=&quot;headerlink&quot; title=&quot;搬家全流程 MARK&quot;&gt;&lt;/a&gt;搬家全流程 MARK&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;找房&quot;&gt;&lt;a href=&quot;#找房&quot; class=&quot;headerlink&quot; title=&quot;找房&quot;&gt;&lt;/a&gt;&lt;strong&gt;找房&lt;/strong&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;弄清需求，找房，砍价，签约，定搬家日期，定下一个给新家买新东西的预算（不然会很没有概念毫无节制的买买买）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;搬家前准备-1&quot;&gt;&lt;a href=&quot;#搬家前准备-1&quot; class=&quot;headerlink&quot; title=&quot;搬家前准备 1&quot;&gt;&lt;/a&gt;&lt;strong&gt;搬家前准备 1&lt;/strong&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基础清洁/深度清洁&lt;ul&gt;
&lt;li&gt;清掉新家用不掉的东西&lt;/li&gt;
&lt;li&gt;做新家清洁（先上到下，先天花板再地面）&lt;ul&gt;
&lt;li&gt;容易忽视的重点：插座消毒，空调遥控器消毒，门把手消毒（最容易藏细菌但是最容易被忽略的角落）&lt;/li&gt;
&lt;li&gt;换掉皮肤直接接触的东西：马桶盖等&lt;/li&gt;
&lt;li&gt;找人洗空调洗洗衣机&lt;/li&gt;
&lt;li&gt;地板使用消毒水清洁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;检查新家各个角落，特别是柜子角落和抽屉等，是否有蟑螂，进行消杀步骤。蟑螂药蟑螂屋都可。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="搬家" scheme="http://yoursite.com/tags/%E6%90%AC%E5%AE%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2022/02/19/hello-world/"/>
    <id>http://yoursite.com/2022/02/19/hello-world/</id>
    <published>2022-02-19T03:02:53.045Z</published>
    <updated>2022-02-19T09:14:39.770Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎👏来到这。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欢迎👏来到这。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
